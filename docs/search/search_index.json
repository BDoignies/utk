{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Uni{corn|form} Tool Kit The UTK tool kit aims at providing executables to generate and analyze point set. It is originally meant to help researchers developing sampling patterns in a numerical integration using Monte Carlo estimators. More precisely, it was developed with the precise question of optimizing image synthesis via Path tracing algorithms. Clone and Build UTK is hosted on a git repository. To install it, the first step is to clone the repository on your computer. This can be done using the following command line: git clone https : // github . com / utk - team / utk . git The code can be build on a Linux or a Mac environment. The Windows build is not yet supported. To build it, one can use the following commands, assuming the current working directory is the cloned utk repository. mkdir build cd build cmake .. make External libraries The UTK repository provides the files for two external libraries: CImg (for image processing) dCpp (for automatic differentiation). It may also require several other librairies, namely: CGAL (to generate analytical shapes arrangements) FFTW3 (to compute Fourier spectras) Finally, it also strongly relies on the Gnuplot framework to generate graphs. Note that none of those libraries are mandatory. When building the UTK framework, the external dependancies can be either activated or deactivated. Each tool of this framework is compiled independently. If a dependency is marked as unrequired, all the tools that do not require this dependency are still compiled. Originally, only CImg and dCpp are activated, since they are very light libraries and are provided with the framework. To activate or deactivate a library, one can either edit the file utk/CMakeLists.txt to set to true/false the variables [LIBRARY]_ON. Or one can use the following command ccmake .. from the build repository to edit the compilation options. Misc The UTK library was developed mainly by H\u00e9l\u00e8ne Perrier helene.perrier@liris.cnrs.fr David Coeurjolly david.coeurjolly@liris.cnrs.fr But was also contributed to by Victor Ostromoukhov victor.ostromoukhov@liris.cnrs.fr Jean David Genevaux If you want to refer to UTK in your publications, please use the following bibtex entry: @Misc { UTK , title = { Uni ( corn | form ) tool kit } , note = { url { https : // utk - team . github . io / utk / }} }","title":"Home"},{"location":"#unicornform-tool-kit","text":"The UTK tool kit aims at providing executables to generate and analyze point set. It is originally meant to help researchers developing sampling patterns in a numerical integration using Monte Carlo estimators. More precisely, it was developed with the precise question of optimizing image synthesis via Path tracing algorithms.","title":"Uni{corn|form} Tool Kit"},{"location":"#clone-and-build","text":"UTK is hosted on a git repository. To install it, the first step is to clone the repository on your computer. This can be done using the following command line: git clone https : // github . com / utk - team / utk . git The code can be build on a Linux or a Mac environment. The Windows build is not yet supported. To build it, one can use the following commands, assuming the current working directory is the cloned utk repository. mkdir build cd build cmake .. make","title":"Clone and Build"},{"location":"#external-libraries","text":"The UTK repository provides the files for two external libraries: CImg (for image processing) dCpp (for automatic differentiation). It may also require several other librairies, namely: CGAL (to generate analytical shapes arrangements) FFTW3 (to compute Fourier spectras) Finally, it also strongly relies on the Gnuplot framework to generate graphs. Note that none of those libraries are mandatory. When building the UTK framework, the external dependancies can be either activated or deactivated. Each tool of this framework is compiled independently. If a dependency is marked as unrequired, all the tools that do not require this dependency are still compiled. Originally, only CImg and dCpp are activated, since they are very light libraries and are provided with the framework. To activate or deactivate a library, one can either edit the file utk/CMakeLists.txt to set to true/false the variables [LIBRARY]_ON. Or one can use the following command ccmake .. from the build repository to edit the compilation options.","title":"External libraries"},{"location":"#misc","text":"The UTK library was developed mainly by H\u00e9l\u00e8ne Perrier helene.perrier@liris.cnrs.fr David Coeurjolly david.coeurjolly@liris.cnrs.fr But was also contributed to by Victor Ostromoukhov victor.ostromoukhov@liris.cnrs.fr Jean David Genevaux If you want to refer to UTK in your publications, please use the following bibtex entry: @Misc { UTK , title = { Uni ( corn | form ) tool kit } , note = { url { https : // utk - team . github . io / utk / }} }","title":"Misc"},{"location":"basicclasses/","text":"Doxygen I/O Formats","title":"Basicclasses"},{"location":"doxygen/","text":"Doxygen documentation of the main classes.","title":"Doxygen"},{"location":"io_bin/","text":"File format .bin Files src / io / fileIO . hpp src / io / fileIO_model . hpp src / io / fileIO_bin . hpp Description UnicornTK relies on the extension of the input file to determine its type. When the extension is .bin , the pointsets are stored in binary mode, without any header. It is much more efficient than ascii based format like .dat or .edat , and is usually less memory expensive.","title":"File format .bin"},{"location":"io_bin/#file-format-bin","text":"","title":"File format .bin"},{"location":"io_bin/#files","text":"src / io / fileIO . hpp src / io / fileIO_model . hpp src / io / fileIO_bin . hpp","title":"Files"},{"location":"io_bin/#description","text":"UnicornTK relies on the extension of the input file to determine its type. When the extension is .bin , the pointsets are stored in binary mode, without any header. It is much more efficient than ascii based format like .dat or .edat , and is usually less memory expensive.","title":"Description"},{"location":"io_dat/","text":"File format .dat Files src / io / fileIO . hpp src / io / fileIO_model . hpp src / io / fileIO_dat . hpp Description UnicornTK relies on the extension of the input file to determine its type. When the extension is .dat, the pointsets are stored in ASCII mode, without any header. It separates pointsets using \u201c#\u201d. Examples Pointset 2D, with integer coordinates: 0 0 8 9 4 18 12 3 2 12 10 21 6 6 14 15 1 24 9 1 5 10 13 19 3 4 11 13 7 22 15 7 Several pointsets 3D, with floating point coordinates: 0 . 028783979133885 0 . 155514565332680 0 . 960157398590855 0 . 312483705652990 0 . 218556602070703 0 . 384967410560923 0 . 673679314012099 0 . 457069308836262 0 . 125204502866884 0 . 031104644069240 0 . 744467481911291 0 . 151364350493849 0 . 780586515967871 0 . 647713547723301 0 . 074998346640495 0 . 988180965182414 0 . 776412255544311 0 . 278134082275940 0 . 983786377586375 0 . 678964280914274 0 . 202230252139790 0 . 979205362726749 0 . 478744334187066 0 . 508492128110605 0 . 071264026237480 0 . 081133399876098 0 . 114889761226925 0 . 707450484556018 0 . 673803976428184 0 . 768690652160135 0 . 978489566822185 0 . 491386972715004 0 . 802415643539842 0 . 209128453212122 0 . 559688900494876 0 . 535038666691407 0 . 795027539086302 0 . 867286721446385 0 . 009843063077387 0 . 022699957020278 0 . 192193951502488 0 . 989124133714737 0 . 733347095487022 0 . 055634353322823 0 . 477618701401543 0 . 270563270261177 0 . 253405835538499 0 . 244658759386432 # 0 . 064694803456006 0 . 113265726508867 0 . 716461862371411 0 . 700323686399572 0 . 262854798525305 0 . 312922639146662 0 . 737317744814166 0 . 244726494011638 0 . 160374866835860 0 . 775333373056569 0 . 278546509164978 0 . 554354619596702 0 . 690523887912399 0 . 468639145481549 0 . 485897624978306 0 . 253916406830288 0 . 676244719577079 0 . 781629592362239 0 . 512115267690298 0 . 227197893016785 0 . 797832129941748 0 . 808880204057526 0 . 302567068790683 0 . 670762139295871 0 . 121818090351722 0 . 603383327741964 0 . 627563637128929 0 . 419228645139194 0 . 636057091559297 0 . 647391159238152 0 . 110336893496648 0 . 254953653610999 0 . 201824090024881 0 . 314142002564422 0 . 821459031855096 0 . 298805406386686 0 . 003854810261134 0 . 699553342233308 0 . 648625409381610 0 . 406942344365395 0 . 550702066754620 0 . 131240437536324 0 . 208173566313501 0 . 073366599174535 0 . 629220015283027 0 . 553746611474489 0 . 286626003982179 0 . 075691768917183","title":"File format .dat"},{"location":"io_dat/#file-format-dat","text":"","title":"File format .dat"},{"location":"io_dat/#files","text":"src / io / fileIO . hpp src / io / fileIO_model . hpp src / io / fileIO_dat . hpp","title":"Files"},{"location":"io_dat/#description","text":"UnicornTK relies on the extension of the input file to determine its type. When the extension is .dat, the pointsets are stored in ASCII mode, without any header. It separates pointsets using \u201c#\u201d.","title":"Description"},{"location":"io_dat/#examples","text":"Pointset 2D, with integer coordinates: 0 0 8 9 4 18 12 3 2 12 10 21 6 6 14 15 1 24 9 1 5 10 13 19 3 4 11 13 7 22 15 7 Several pointsets 3D, with floating point coordinates: 0 . 028783979133885 0 . 155514565332680 0 . 960157398590855 0 . 312483705652990 0 . 218556602070703 0 . 384967410560923 0 . 673679314012099 0 . 457069308836262 0 . 125204502866884 0 . 031104644069240 0 . 744467481911291 0 . 151364350493849 0 . 780586515967871 0 . 647713547723301 0 . 074998346640495 0 . 988180965182414 0 . 776412255544311 0 . 278134082275940 0 . 983786377586375 0 . 678964280914274 0 . 202230252139790 0 . 979205362726749 0 . 478744334187066 0 . 508492128110605 0 . 071264026237480 0 . 081133399876098 0 . 114889761226925 0 . 707450484556018 0 . 673803976428184 0 . 768690652160135 0 . 978489566822185 0 . 491386972715004 0 . 802415643539842 0 . 209128453212122 0 . 559688900494876 0 . 535038666691407 0 . 795027539086302 0 . 867286721446385 0 . 009843063077387 0 . 022699957020278 0 . 192193951502488 0 . 989124133714737 0 . 733347095487022 0 . 055634353322823 0 . 477618701401543 0 . 270563270261177 0 . 253405835538499 0 . 244658759386432 # 0 . 064694803456006 0 . 113265726508867 0 . 716461862371411 0 . 700323686399572 0 . 262854798525305 0 . 312922639146662 0 . 737317744814166 0 . 244726494011638 0 . 160374866835860 0 . 775333373056569 0 . 278546509164978 0 . 554354619596702 0 . 690523887912399 0 . 468639145481549 0 . 485897624978306 0 . 253916406830288 0 . 676244719577079 0 . 781629592362239 0 . 512115267690298 0 . 227197893016785 0 . 797832129941748 0 . 808880204057526 0 . 302567068790683 0 . 670762139295871 0 . 121818090351722 0 . 603383327741964 0 . 627563637128929 0 . 419228645139194 0 . 636057091559297 0 . 647391159238152 0 . 110336893496648 0 . 254953653610999 0 . 201824090024881 0 . 314142002564422 0 . 821459031855096 0 . 298805406386686 0 . 003854810261134 0 . 699553342233308 0 . 648625409381610 0 . 406942344365395 0 . 550702066754620 0 . 131240437536324 0 . 208173566313501 0 . 073366599174535 0 . 629220015283027 0 . 553746611474489 0 . 286626003982179 0 . 075691768917183","title":"Examples"},{"location":"io_ebin/","text":"File format .ebin Files src / io / fileIO . hpp src / io / fileIO_model . hpp src / io / fileIO_ebin . hpp Description UnicornTK relies on the extension of the input file to determine its type. When the extension is .ebin , the pointsets are stored in binary mode, with a header containing the extend of the pointset domain and the toricity of the pointset. It is much more efficient than ascii based format like .dat or .edat , and is usually less memory expensive.","title":"File format .ebin"},{"location":"io_ebin/#file-format-ebin","text":"","title":"File format .ebin"},{"location":"io_ebin/#files","text":"src / io / fileIO . hpp src / io / fileIO_model . hpp src / io / fileIO_ebin . hpp","title":"Files"},{"location":"io_ebin/#description","text":"UnicornTK relies on the extension of the input file to determine its type. When the extension is .ebin , the pointsets are stored in binary mode, with a header containing the extend of the pointset domain and the toricity of the pointset. It is much more efficient than ascii based format like .dat or .edat , and is usually less memory expensive.","title":"Description"},{"location":"io_edat/","text":"File format .edat Files src / io / fileIO . hpp src / io / fileIO_model . hpp src / io / fileIO_edat . hpp Description UnicornTK relies on the extension of the input file to determine its type. When the extension is .edat , the pointsets are stored in ASCII mode, with a 3 line header containing the extend of the pointset domain and the toricity of the pointset. The first line is the minimal point of the domain, the second line is the maximal point and the third line contains a boolean indicating is the pointset is toric or not It separates pointsets using \u201c#\u201d. Examples Pointset 2D, Toric, in domain [0,1]^3 [0,1]^3 , with integer coordinates: 0 0 1024 2187 1 0 0 512 729 256 1458 768 243 128 972 640 1701 384 486 896 1215 64 1944 576 81 320 810 832 1539 192 324 704 1053 448 1782 960 567 32 1296 544 2025 288 162 800 891 160 1620 672 405 416 1134 928 1863 96 648 Several pointsets 3D, Toric, in domain [0,1]^3 [0,1]^3 , with floating point coordinates: 0 . 000000000000000 0 . 000000000000000 0 . 000000000000000 1 . 000000000000000 1 . 000000000000000 1 . 000000000000000 1 0 . 050395372335425 0 . 605445716671051 0 . 404234371009337 0 . 825739547336879 0 . 019014228372605 0 . 571619643962853 0 . 251084789226550 0 . 796739092282192 0 . 662392276959119 0 . 076733451587319 0 . 966740387484138 0 . 104033727921553 0 . 022851851774112 0 . 541269098301714 0 . 274100657150638 0 . 836165956649037 0 . 710473378354328 0 . 218262058035066 0 . 734431378481544 0 . 045624867092265 0 . 108525469691615 0 . 424232415953705 0 . 622989150374892 0 . 445836456596348 0 . 459817434535319 0 . 149720273248321 0 . 263248428763647 0 . 492075960732083 0 . 549053552688345 0 . 021870193542417 0 . 331534335234094 0 . 343634019220163 0 . 221821374311536 0 . 398141971416339 0 . 458952383943590 0 . 978517358419140 0 . 269279661418237 0 . 511562038332122 0 . 016162883494087 0 . 258357287444723 0 . 187212941280383 0 . 399687562696563 0 . 796217287843166 0 . 147599688299838 0 . 400614753225961 0 . 748264057735974 0 . 041631821552671 0 . 061114694238900 # 0 . 000000000000000 0 . 000000000000000 0 . 000000000000000 1 . 000000000000000 1 . 000000000000000 1 . 000000000000000 1 0 . 728055556474266 0 . 560123025104432 0 . 385942792609786 0 . 199736131401671 0 . 196849285437923 0 . 846230597897952 0 . 965195278163346 0 . 820035925093115 0 . 776832124632046 0 . 207031543414814 0 . 707106014878281 0 . 422963624918592 0 . 437438748645931 0 . 934516076914621 0 . 731540281030242 0 . 884149564868805 0 . 817359755006004 0 . 868729761072604 0 . 340246866303554 0 . 478473960766213 0 . 475246819778170 0 . 919041518335939 0 . 328492126969735 0 . 889999115348328 0 . 629857444816701 0 . 050157970760520 0 . 017919836337194 0 . 936117153134224 0 . 322178287972272 0 . 747246075828384 0 . 260712328427637 0 . 595219216448073 0 . 609722221644996 0 . 703291282920002 0 . 980232460419701 0 . 416594642544304 0 . 947554823464610 0 . 746043482969060 0 . 298958397540021 0 . 861714192401086 0 . 825613557320464 0 . 466442995114821 0 . 609747354781662 0 . 819148976779345 0 . 878929865983997 0 . 334699008226092 0 . 987974778280588 0 . 963871809412695","title":"File format .edat"},{"location":"io_edat/#file-format-edat","text":"","title":"File format .edat"},{"location":"io_edat/#files","text":"src / io / fileIO . hpp src / io / fileIO_model . hpp src / io / fileIO_edat . hpp","title":"Files"},{"location":"io_edat/#description","text":"UnicornTK relies on the extension of the input file to determine its type. When the extension is .edat , the pointsets are stored in ASCII mode, with a 3 line header containing the extend of the pointset domain and the toricity of the pointset. The first line is the minimal point of the domain, the second line is the maximal point and the third line contains a boolean indicating is the pointset is toric or not It separates pointsets using \u201c#\u201d.","title":"Description"},{"location":"io_edat/#examples","text":"Pointset 2D, Toric, in domain [0,1]^3 [0,1]^3 , with integer coordinates: 0 0 1024 2187 1 0 0 512 729 256 1458 768 243 128 972 640 1701 384 486 896 1215 64 1944 576 81 320 810 832 1539 192 324 704 1053 448 1782 960 567 32 1296 544 2025 288 162 800 891 160 1620 672 405 416 1134 928 1863 96 648 Several pointsets 3D, Toric, in domain [0,1]^3 [0,1]^3 , with floating point coordinates: 0 . 000000000000000 0 . 000000000000000 0 . 000000000000000 1 . 000000000000000 1 . 000000000000000 1 . 000000000000000 1 0 . 050395372335425 0 . 605445716671051 0 . 404234371009337 0 . 825739547336879 0 . 019014228372605 0 . 571619643962853 0 . 251084789226550 0 . 796739092282192 0 . 662392276959119 0 . 076733451587319 0 . 966740387484138 0 . 104033727921553 0 . 022851851774112 0 . 541269098301714 0 . 274100657150638 0 . 836165956649037 0 . 710473378354328 0 . 218262058035066 0 . 734431378481544 0 . 045624867092265 0 . 108525469691615 0 . 424232415953705 0 . 622989150374892 0 . 445836456596348 0 . 459817434535319 0 . 149720273248321 0 . 263248428763647 0 . 492075960732083 0 . 549053552688345 0 . 021870193542417 0 . 331534335234094 0 . 343634019220163 0 . 221821374311536 0 . 398141971416339 0 . 458952383943590 0 . 978517358419140 0 . 269279661418237 0 . 511562038332122 0 . 016162883494087 0 . 258357287444723 0 . 187212941280383 0 . 399687562696563 0 . 796217287843166 0 . 147599688299838 0 . 400614753225961 0 . 748264057735974 0 . 041631821552671 0 . 061114694238900 # 0 . 000000000000000 0 . 000000000000000 0 . 000000000000000 1 . 000000000000000 1 . 000000000000000 1 . 000000000000000 1 0 . 728055556474266 0 . 560123025104432 0 . 385942792609786 0 . 199736131401671 0 . 196849285437923 0 . 846230597897952 0 . 965195278163346 0 . 820035925093115 0 . 776832124632046 0 . 207031543414814 0 . 707106014878281 0 . 422963624918592 0 . 437438748645931 0 . 934516076914621 0 . 731540281030242 0 . 884149564868805 0 . 817359755006004 0 . 868729761072604 0 . 340246866303554 0 . 478473960766213 0 . 475246819778170 0 . 919041518335939 0 . 328492126969735 0 . 889999115348328 0 . 629857444816701 0 . 050157970760520 0 . 017919836337194 0 . 936117153134224 0 . 322178287972272 0 . 747246075828384 0 . 260712328427637 0 . 595219216448073 0 . 609722221644996 0 . 703291282920002 0 . 980232460419701 0 . 416594642544304 0 . 947554823464610 0 . 746043482969060 0 . 298958397540021 0 . 861714192401086 0 . 825613557320464 0 . 466442995114821 0 . 609747354781662 0 . 819148976779345 0 . 878929865983997 0 . 334699008226092 0 . 987974778280588 0 . 963871809412695","title":"Examples"},{"location":"io_format/","text":"ASCII output .dat .edat Binary output .bin .ebin Graphic output .ps .tex (tikz)","title":"I/O formats"},{"location":"io_ps/","text":"File format .ps Files src / io / imageIO . hpp src / io / imageIO_model . hpp src / io / imageIO_ps . hpp Description UnicornTK relies on the extension of the input file to determine its type. When the extension is .ps , the pointset is drawn into a postscript file. Examples Input pointset Output .ps file Image sobol_128.edat sobol_128.ps stratified_25.dat stratified_25.ps toric_bnot_50.dat toric_bnot_50.ps","title":"File format .ps"},{"location":"io_ps/#file-format-ps","text":"","title":"File format .ps"},{"location":"io_ps/#files","text":"src / io / imageIO . hpp src / io / imageIO_model . hpp src / io / imageIO_ps . hpp","title":"Files"},{"location":"io_ps/#description","text":"UnicornTK relies on the extension of the input file to determine its type. When the extension is .ps , the pointset is drawn into a postscript file.","title":"Description"},{"location":"io_ps/#examples","text":"Input pointset Output .ps file Image sobol_128.edat sobol_128.ps stratified_25.dat stratified_25.ps toric_bnot_50.dat toric_bnot_50.ps","title":"Examples"},{"location":"io_tikz/","text":"File format .tex Files src / io / imageIO . hpp src / io / imageIO \\ _model . hpp src / io / imageIO \\ _tikz . hpp Description UnicornTK relies on the extension of the input file to determine its type. When the extension is .tex, the pointset is drawn as a tikz figure in a .tex file. This file can be compiled using any latex compiler you want to generate a .pdf image. Examples Input pointset Output .tex file Image sobol_128.edat sobol_128.tex stratified_25.dat stratified_25.tex toric_bnot_50.dat toric_bnot_50.tex","title":"File format .tex"},{"location":"io_tikz/#file-format-tex","text":"","title":"File format .tex"},{"location":"io_tikz/#files","text":"src / io / imageIO . hpp src / io / imageIO \\ _model . hpp src / io / imageIO \\ _tikz . hpp","title":"Files"},{"location":"io_tikz/#description","text":"UnicornTK relies on the extension of the input file to determine its type. When the extension is .tex, the pointset is drawn as a tikz figure in a .tex file. This file can be compiled using any latex compiler you want to generate a .pdf image.","title":"Description"},{"location":"io_tikz/#examples","text":"Input pointset Output .tex file Image sobol_128.edat sobol_128.tex stratified_25.dat stratified_25.tex toric_bnot_50.dat toric_bnot_50.tex","title":"Examples"},{"location":"sampler_BNLDS/","text":"Sampler BNLDS Files src/samplers/SamplerBNLDS.hpp src/samplers/BNLDS_2dd.cpp Description For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html . Execution Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message --lut-in [string] the file containing the lookuptable --sobolD0 [uint = 1] the sobol indices for dimension 0 --sobolD1 [uint = 2] the sobol indices for dimension 1 -K [uint = 4] the subdivision factor K --level [uint = -1] the level of subdivision (overrides the -n parameter) To generate a 2D point set of 1024 samples with a BNLDS distribution, we can use the following client line command: ./src/samplers/BNLDS_2dd -n 1024 -o toto.dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; . / src / samplers / SamplerBNLDS . hpp s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close (); Results Note that only the point sets containing K^{2n} samples are Blue Noise and Low Discrepancy, for K=4, 1024 is not a multiple of 4^{2n}, whereas 4096=4^6 (n=3). ./src/samplers/BNLDS_2dd -o BNLDS_1024.edat -n 1024 File BNLDS_1024.edat Pointset Fourier ./src/samplers/BNLDS_2dd -o BNLDS_4096.edat -n 4096 File BNLDS_4096.edat Pointset Fourier Changing the initial Sobol sequence ./src/samplers/BNLDS_2dd \u2013sobolD0 3 \u2013sobolD1 7 \u2013lut-in ../data/BNLDS/factorK_4/Sobol_37/allPermutsCache_Sobol+OptPerms_3_7_00000.dat -o BNLDS_2_4096.edat -n 4096 File BNLDS_2_4096.edat Pointset Fourier Changing the K factor ./src/samplers/BNLDS_2dd -K 8 \u2013sobolD0 1 \u2013sobolD1 2 \u2013lut-in ../data/BNLDS/factorK_8/fastoptim_lut_sobol1_2_k8_lvlmax3_sampler_BNLDS_optimizer_PCF_RandomOpti_2dd.dat -o BNLDS_3_4096.edat -n 4096 File BNLDS_3_4096.edat Pointset Fourier","title":"BNLD Sequences"},{"location":"sampler_BNLDS/#sampler-bnlds","text":"Files src/samplers/SamplerBNLDS.hpp src/samplers/BNLDS_2dd.cpp","title":"Sampler BNLDS"},{"location":"sampler_BNLDS/#description","text":"For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html .","title":"Description"},{"location":"sampler_BNLDS/#execution","text":"Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message --lut-in [string] the file containing the lookuptable --sobolD0 [uint = 1] the sobol indices for dimension 0 --sobolD1 [uint = 2] the sobol indices for dimension 1 -K [uint = 4] the subdivision factor K --level [uint = -1] the level of subdivision (overrides the -n parameter) To generate a 2D point set of 1024 samples with a BNLDS distribution, we can use the following client line command: ./src/samplers/BNLDS_2dd -n 1024 -o toto.dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; . / src / samplers / SamplerBNLDS . hpp s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close ();","title":"Execution"},{"location":"sampler_BNLDS/#results","text":"Note that only the point sets containing K^{2n} samples are Blue Noise and Low Discrepancy, for K=4, 1024 is not a multiple of 4^{2n}, whereas 4096=4^6 (n=3). ./src/samplers/BNLDS_2dd -o BNLDS_1024.edat -n 1024 File BNLDS_1024.edat Pointset Fourier ./src/samplers/BNLDS_2dd -o BNLDS_4096.edat -n 4096 File BNLDS_4096.edat Pointset Fourier Changing the initial Sobol sequence ./src/samplers/BNLDS_2dd \u2013sobolD0 3 \u2013sobolD1 7 \u2013lut-in ../data/BNLDS/factorK_4/Sobol_37/allPermutsCache_Sobol+OptPerms_3_7_00000.dat -o BNLDS_2_4096.edat -n 4096 File BNLDS_2_4096.edat Pointset Fourier Changing the K factor ./src/samplers/BNLDS_2dd -K 8 \u2013sobolD0 1 \u2013sobolD1 2 \u2013lut-in ../data/BNLDS/factorK_8/fastoptim_lut_sobol1_2_k8_lvlmax3_sampler_BNLDS_optimizer_PCF_RandomOpti_2dd.dat -o BNLDS_3_4096.edat -n 4096 File BNLDS_3_4096.edat Pointset Fourier","title":"Results"},{"location":"sampler_BNOT/","text":"Sampler BNOT Files externals/bnot/* Description This sampler is the BNOT sampmler from []. Due to its code complexity, this sampler was not ported within the UTK framework. It is therefore provided as an external party (in the externals folder). It was however slightly modified to allow using this sampler with similar parameters as other samples from UTK (very useful for scripting purposes). To compile this sampler, please do the following: cd externals/bnot mkdir build cd build cmake .. make For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html . Execution Parameters: [HELP] -o [string] Output file -m [int = 1] Number of poinset realisations -n [int = 1024] Number of samples to generate -h Displays this help message To generate a 2D point set of 1024 samples using BNOT, we can use the following client line command (from the buold folder): ../externals/bnot/build/pbnot -n 1024 -o toto.dat Results ../externals/bnot/build/pbnot -o BNOT_1024.edat -n 1024 File BNOT_1024.edat Pointset Fourier ../externals/bnot/build/pbnot -o BNOT_4096.edat -n 4096 File BNOT_4096.edat Pointset Fourier","title":"BNOT"},{"location":"sampler_BNOT/#sampler-bnot","text":"Files externals/bnot/*","title":"Sampler BNOT"},{"location":"sampler_BNOT/#description","text":"This sampler is the BNOT sampmler from []. Due to its code complexity, this sampler was not ported within the UTK framework. It is therefore provided as an external party (in the externals folder). It was however slightly modified to allow using this sampler with similar parameters as other samples from UTK (very useful for scripting purposes). To compile this sampler, please do the following: cd externals/bnot mkdir build cd build cmake .. make For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html .","title":"Description"},{"location":"sampler_BNOT/#execution","text":"Parameters: [HELP] -o [string] Output file -m [int = 1] Number of poinset realisations -n [int = 1024] Number of samples to generate -h Displays this help message To generate a 2D point set of 1024 samples using BNOT, we can use the following client line command (from the buold folder): ../externals/bnot/build/pbnot -n 1024 -o toto.dat","title":"Execution"},{"location":"sampler_BNOT/#results","text":"../externals/bnot/build/pbnot -o BNOT_1024.edat -n 1024 File BNOT_1024.edat Pointset Fourier ../externals/bnot/build/pbnot -o BNOT_4096.edat -n 4096 File BNOT_4096.edat Pointset Fourier","title":"Results"},{"location":"sampler_CVT/","text":"Sampler CVT [BSD09] Files src/samplers/SamplerCapCVT.hpp src/samplers/CVT_2dd.cpp src/samplers/SamplerCapCVT/* Description Implementation of the CVT sampler from [BSD09] . For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html . Execution Parameters: [HELP] --boundary [string] The file with the boundary of the domain --iter [int] The number of iterations -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message To generate a 2D point set of 1024 samples with a CCVT distribution, we can use the following client line command: ./src/samplers/CVT_2dd -n 1024 -o toto.dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerCapCVT . s ; uint nbIter = 100 ; s . setIterations ( nbIter ); unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close (); Results ./src/samplers/CCVT_2dd -o CVT_1024.edat -n 1024 File CCVT_1024.edat Pointset Fourier ./src/samplers/CCVT_2dd -o CVT_4096.edat -n 4096 File CCVT_4096.edat Pointset Fourier ./src/samplers/CVT_2dd -o CVT_2_4096.edat -n 4096 \u2013iter 10 File CVT_2_4096.edat Pointset Fourier","title":"CVT"},{"location":"sampler_CVT/#sampler-cvt-bsd09","text":"Files src/samplers/SamplerCapCVT.hpp src/samplers/CVT_2dd.cpp src/samplers/SamplerCapCVT/*","title":"Sampler CVT [BSD09]"},{"location":"sampler_CVT/#description","text":"Implementation of the CVT sampler from [BSD09] . For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html .","title":"Description"},{"location":"sampler_CVT/#execution","text":"Parameters: [HELP] --boundary [string] The file with the boundary of the domain --iter [int] The number of iterations -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message To generate a 2D point set of 1024 samples with a CCVT distribution, we can use the following client line command: ./src/samplers/CVT_2dd -n 1024 -o toto.dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerCapCVT . s ; uint nbIter = 100 ; s . setIterations ( nbIter ); unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close ();","title":"Execution"},{"location":"sampler_CVT/#results","text":"./src/samplers/CCVT_2dd -o CVT_1024.edat -n 1024 File CCVT_1024.edat Pointset Fourier ./src/samplers/CCVT_2dd -o CVT_4096.edat -n 4096 File CCVT_4096.edat Pointset Fourier ./src/samplers/CVT_2dd -o CVT_2_4096.edat -n 4096 \u2013iter 10 File CVT_2_4096.edat Pointset Fourier","title":"Results"},{"location":"sampler_CapCVT/","text":"Sampler CapCVT [CYC12] Files src/samplers/SamplerCapCVT.hpp src/samplers/CapCVT_2dd.cpp src/samplers/SamplerCapCVT/ Description Implementation of the CapCVT sampler from [CYC12] . For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html . Execution Parameters: [HELP] --boundary [string] The file with the boundary of the domain --iter [int] The number of iterations --lambda [float] The lambda value -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message To generate a 2D point set of 1024 samples with a CapCVT distribution, we can use the following client line command: ./src/samplers/CapCVT_2dd -n 1024 -o toto.dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerCapCVT s ; double lambda = 30 . 0 ; s . setLambda ( lambda ); uint nbIter = 100 ; s . setIterations ( nbIter ); unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close (); Results ./src/samplers/CapCVT_2dd -o CapCVT_1024.edat -n 1024 File CapCVT_1024.edat Pointset Fourier ./src/samplers/CapCVT_2dd -o CapCVT_4096.edat -n 4096 File CapCVT_4096.edat Pointset Fourier ./src/samplers/CapCVT_2dd -o CapCVT_2_1024.edat -n 1024 \u2013lambda 10 File CapCVT_2_1024.edat Pointset Fourier ./src/samplers/CapCVT_2dd -o CapCVT_2_1024.edat -n 1024 \u2013iter 10 File CapCVT_3_1024.edat Pointset Fourier","title":"CapCVT"},{"location":"sampler_CapCVT/#sampler-capcvt-cyc12","text":"Files src/samplers/SamplerCapCVT.hpp src/samplers/CapCVT_2dd.cpp src/samplers/SamplerCapCVT/","title":"Sampler CapCVT [CYC12]"},{"location":"sampler_CapCVT/#description","text":"Implementation of the CapCVT sampler from [CYC12] . For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html .","title":"Description"},{"location":"sampler_CapCVT/#execution","text":"Parameters: [HELP] --boundary [string] The file with the boundary of the domain --iter [int] The number of iterations --lambda [float] The lambda value -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message To generate a 2D point set of 1024 samples with a CapCVT distribution, we can use the following client line command: ./src/samplers/CapCVT_2dd -n 1024 -o toto.dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerCapCVT s ; double lambda = 30 . 0 ; s . setLambda ( lambda ); uint nbIter = 100 ; s . setIterations ( nbIter ); unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close ();","title":"Execution"},{"location":"sampler_CapCVT/#results","text":"./src/samplers/CapCVT_2dd -o CapCVT_1024.edat -n 1024 File CapCVT_1024.edat Pointset Fourier ./src/samplers/CapCVT_2dd -o CapCVT_4096.edat -n 4096 File CapCVT_4096.edat Pointset Fourier ./src/samplers/CapCVT_2dd -o CapCVT_2_1024.edat -n 1024 \u2013lambda 10 File CapCVT_2_1024.edat Pointset Fourier ./src/samplers/CapCVT_2dd -o CapCVT_2_1024.edat -n 1024 \u2013iter 10 File CapCVT_3_1024.edat Pointset Fourier","title":"Results"},{"location":"sampler_FPO/","text":"Sampler FPO [SHD11] Files src/samplers/SamplerFPO.hpp src/samplers/SamplerFPO/* src/bin/samplers/FPO_2dd.cpp Description Implementation from the stk library of the sampler from [SHD11] . For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html . Execution Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message To generate a 2D point set of 1024 samples with a FPO distribution, we can use the following client line command: ./src/samplers/FPO_2dd -n 1024 -o toto.dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerFPO s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close (); Results ./src/samplers/FPO_2dd -o FPO_1024.edat -n 1024 File FPO_1024.edat Pointset Fourier ./src/samplers/FPO_2dd -o FPO_4096.edat -n 4096 File FPO_4096.edat Pointset Fourier","title":"FPO"},{"location":"sampler_FPO/#sampler-fpo-shd11","text":"Files src/samplers/SamplerFPO.hpp src/samplers/SamplerFPO/* src/bin/samplers/FPO_2dd.cpp","title":"Sampler FPO [SHD11]"},{"location":"sampler_FPO/#description","text":"Implementation from the stk library of the sampler from [SHD11] . For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html .","title":"Description"},{"location":"sampler_FPO/#execution","text":"Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message To generate a 2D point set of 1024 samples with a FPO distribution, we can use the following client line command: ./src/samplers/FPO_2dd -n 1024 -o toto.dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerFPO s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close ();","title":"Execution"},{"location":"sampler_FPO/#results","text":"./src/samplers/FPO_2dd -o FPO_1024.edat -n 1024 File FPO_1024.edat Pointset Fourier ./src/samplers/FPO_2dd -o FPO_4096.edat -n 4096 File FPO_4096.edat Pointset Fourier","title":"Results"},{"location":"sampler_PMJ/","text":"UTK hljs.initHighlightingOnLoad(); Sampler PMJ [PMJ] Files src/samplers/src_pmj Description The Progressive Multi-Jittered sampler. This sampler is divided in 3 techniques, each giving better results than the previous one : Progressive Jittered (PJ) : Divides the unit square into 4 equal squares. Randomly throws a point into each subsquare. Then divide those subsquares into subsubsquares. Randomly throws points in them, and so on. Progressive Multi-Jittered (PMJ) : Adds to PJ one property : Using PJ, each sample falls into its own square subdivision. Using PMJ, each sample falls into its own square subdivision AND its own strata. When throwing points, uses a best candidate algorithm. Progressive Multi-Jittered(0,2) (PMJ02) : Generalises the previous techniques. If we subdivide the unit square into equals rectangles, each sample falls into its own rectangle. View article : [PMJ] Execution Parameters: [HELP] -o [string = output_pts.dat] Output file -n [ullint = 1024] Number of samples to generate -s [int = 0] Seed -c [int = 10] For PMJ Sampler, number of candidates for best candidates selection. To generate a 2D point set of 1024 samples with a PMJ distribution using 20 candidates, we can use the following client line command: . / bin / samplers / ProgressiveMultiJittered_2dd - n 1024 - o toto . dat - s 0 - c 20 Results File PJ____ 1024.dat Pointset Fourier File PMJ___1024.dat Pointset Fourier File PMJ02_1024.dat Pointset Fourier File PMJ02_4096.dat Pointset Fourier","title":"sampler PMJ"},{"location":"sampler_PMJ/#sampler-pmj-pmj","text":"Files src/samplers/src_pmj","title":"Sampler PMJ [PMJ]"},{"location":"sampler_PMJ/#description","text":"The Progressive Multi-Jittered sampler. This sampler is divided in 3 techniques, each giving better results than the previous one : Progressive Jittered (PJ) : Divides the unit square into 4 equal squares. Randomly throws a point into each subsquare. Then divide those subsquares into subsubsquares. Randomly throws points in them, and so on. Progressive Multi-Jittered (PMJ) : Adds to PJ one property : Using PJ, each sample falls into its own square subdivision. Using PMJ, each sample falls into its own square subdivision AND its own strata. When throwing points, uses a best candidate algorithm. Progressive Multi-Jittered(0,2) (PMJ02) : Generalises the previous techniques. If we subdivide the unit square into equals rectangles, each sample falls into its own rectangle. View article : [PMJ]","title":"Description"},{"location":"sampler_PMJ/#execution","text":"Parameters: [HELP] -o [string = output_pts.dat] Output file -n [ullint = 1024] Number of samples to generate -s [int = 0] Seed -c [int = 10] For PMJ Sampler, number of candidates for best candidates selection. To generate a 2D point set of 1024 samples with a PMJ distribution using 20 candidates, we can use the following client line command: . / bin / samplers / ProgressiveMultiJittered_2dd - n 1024 - o toto . dat - s 0 - c 20","title":"Execution"},{"location":"sampler_PMJ/#results","text":"File PJ____ 1024.dat Pointset Fourier File PMJ___1024.dat Pointset Fourier File PMJ02_1024.dat Pointset Fourier File PMJ02_4096.dat Pointset Fourier","title":"Results"},{"location":"sampler_aapatterns/","text":"Sampler AA Patterns [Ahm16] Files src/samplers/SamplerAAPattern.hpp src/bin/samplers/AAPatterns_2dd.cpp.cpp Description The AA Pattern sampler from [Ahm16] . For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html . Execution Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message -d File containing the displacement vectors To generate a 2D point set of 1024 samples with a aapatterns distribution, we can use the following client line command: . / bin / samplers / AAPatterns_2dd - d .. / .. / data / aapatterns / blue . dat - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerAAPattern s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close (); Results . / bin / samplers / AAPatterns_2dd - d .. / .. / data / aapatterns / blue . dat - o aapatterns_1024 . edat - n 1024 File aapatterns_1024.edat Pointset Fourier . / bin / samplers / AAPatterns_2dd - d .. / .. / data / aapatterns / blue . dat - o aapatterns_4096 . edat - n 4096 File aapatterns_4096.edat Pointset Fourier This sampler can also match various distributions . / bin / samplers / AAPatterns_2dd - d .. / .. / data / aapatterns / green . dat - o aapatterns_green_1024 . edat - n 1024 File aapatterns_green_1024.edat Pointset Fourier . / bin / samplers / AAPatterns_2dd - d .. / .. / data / aapatterns / pink . dat - o aapatterns_pink_1024 . edat - n 1024 File aapatterns_pink_1024.edat Pointset Fourier . / bin / samplers / AAPatterns_2dd - d .. / .. / data / aapatterns / step . dat - o aapatterns_step_1024 . edat - n 1024 File aapatterns_step_1024.edat Pointset Fourier","title":"AA Patterns"},{"location":"sampler_aapatterns/#sampler-aa-patterns-ahm16","text":"Files src/samplers/SamplerAAPattern.hpp src/bin/samplers/AAPatterns_2dd.cpp.cpp","title":"Sampler AA Patterns [Ahm16]"},{"location":"sampler_aapatterns/#description","text":"The AA Pattern sampler from [Ahm16] . For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html .","title":"Description"},{"location":"sampler_aapatterns/#execution","text":"Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message -d File containing the displacement vectors To generate a 2D point set of 1024 samples with a aapatterns distribution, we can use the following client line command: . / bin / samplers / AAPatterns_2dd - d .. / .. / data / aapatterns / blue . dat - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerAAPattern s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close ();","title":"Execution"},{"location":"sampler_aapatterns/#results","text":". / bin / samplers / AAPatterns_2dd - d .. / .. / data / aapatterns / blue . dat - o aapatterns_1024 . edat - n 1024 File aapatterns_1024.edat Pointset Fourier . / bin / samplers / AAPatterns_2dd - d .. / .. / data / aapatterns / blue . dat - o aapatterns_4096 . edat - n 4096 File aapatterns_4096.edat Pointset Fourier This sampler can also match various distributions . / bin / samplers / AAPatterns_2dd - d .. / .. / data / aapatterns / green . dat - o aapatterns_green_1024 . edat - n 1024 File aapatterns_green_1024.edat Pointset Fourier . / bin / samplers / AAPatterns_2dd - d .. / .. / data / aapatterns / pink . dat - o aapatterns_pink_1024 . edat - n 1024 File aapatterns_pink_1024.edat Pointset Fourier . / bin / samplers / AAPatterns_2dd - d .. / .. / data / aapatterns / step . dat - o aapatterns_step_1024 . edat - n 1024 File aapatterns_step_1024.edat Pointset Fourier","title":"Results"},{"location":"sampler_art/","text":"Sampler ART [ANH*17] Files src/samplers/SamplerART.hpp src/bin/samplers/ART_2dd.cpp.cpp Description The sampler from [ANH*17] For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html . Execution Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message -d File containing the tiles offsets To generate a 2D point set of 1024 samples with a art distribution, we can use the following client line command: . / bin / samplers / ART_2dd - d .. / .. / data / ART / table . dat - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerART s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close (); Results . / bin / samplers / ART_2dd - d .. / .. / data / ART / table . dat - o art_1024 . edat - n 1024 File art_1024.edat Pointset Fourier . / bin / samplers / ART_2dd - d .. / .. / data / ART / table . dat - o art_4096 . edat - n 4096 File art_4096.edat Pointset Fourier","title":"ART"},{"location":"sampler_art/#sampler-art-anh17","text":"Files src/samplers/SamplerART.hpp src/bin/samplers/ART_2dd.cpp.cpp","title":"Sampler ART [ANH*17]"},{"location":"sampler_art/#description","text":"The sampler from [ANH*17] For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html .","title":"Description"},{"location":"sampler_art/#execution","text":"Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message -d File containing the tiles offsets To generate a 2D point set of 1024 samples with a art distribution, we can use the following client line command: . / bin / samplers / ART_2dd - d .. / .. / data / ART / table . dat - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerART s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close ();","title":"Execution"},{"location":"sampler_art/#results","text":". / bin / samplers / ART_2dd - d .. / .. / data / ART / table . dat - o art_1024 . edat - n 1024 File art_1024.edat Pointset Fourier . / bin / samplers / ART_2dd - d .. / .. / data / ART / table . dat - o art_4096 . edat - n 4096 File art_4096.edat Pointset Fourier","title":"Results"},{"location":"sampler_bn_poisson/","text":"Blue Noise Samplers AA Patterns ART CVT CapCVT Forced Random FPO LDBN Penrose BNOT Poisson Samplers Dart Throwing Fast Poisson","title":"Sampler bn poisson"},{"location":"sampler_cmj/","text":"Sampler Correlated Multi Jittered [Ken03] Files src/samplers/SamplerCMJ.hpp src/bin/samplers/CMJ_2dd.cpp.cpp Description The Correlated Multi-Jitter sampler from [Kens03] . For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html . Execution Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message To generate a 2D point set of 1024 samples with a cmj distribution, we can use the following client line command: . / bin / samplers / CMJ_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerCMJ s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close (); Results . / bin / samplers / CMJ_2dd - o cmj_1024 . edat - n 1024 File cmj_1024.edat Pointset Fourier . / bin / samplers / CMJ_2dd - o cmj_4096 . edat - n 4096 File cmj_4096.edat Pointset Fourier","title":"CMJ"},{"location":"sampler_cmj/#sampler-correlated-multi-jittered-ken03","text":"Files src/samplers/SamplerCMJ.hpp src/bin/samplers/CMJ_2dd.cpp.cpp","title":"Sampler Correlated Multi Jittered [Ken03]"},{"location":"sampler_cmj/#description","text":"The Correlated Multi-Jitter sampler from [Kens03] . For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html .","title":"Description"},{"location":"sampler_cmj/#execution","text":"Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message To generate a 2D point set of 1024 samples with a cmj distribution, we can use the following client line command: . / bin / samplers / CMJ_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerCMJ s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close ();","title":"Execution"},{"location":"sampler_cmj/#results","text":". / bin / samplers / CMJ_2dd - o cmj_1024 . edat - n 1024 File cmj_1024.edat Pointset Fourier . / bin / samplers / CMJ_2dd - o cmj_4096 . edat - n 4096 File cmj_4096.edat Pointset Fourier","title":"Results"},{"location":"sampler_dart_throwing/","text":"Sampler Dart Throwing [MF92] Files src/samplers/SamplerDartThrowing.hpp src/bin/samplers/DartThrowing_2dd.cpp.cpp Description A naive (relaxed) dart throwing algorithm. For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html . Execution Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message --relaxed Use relaxed dart throwing To generate a 2D point set of 1024 samples with a dart_throwing distribution, we can use the following client line command: . / bin / samplers / DartThrowing_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerDartThrowing s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close (); Results . / bin / samplers / DartThrowing_2dd - o dart_throwing_1024 . edat - n 1024 File dart_throwing_1024.edat Pointset Fourier . / bin / samplers / DartThrowing_2dd - o dart_throwing_4096 . edat - n 4096 File dart_throwing_4096.edat Pointset Fourier . / bin / samplers / DartThrowing_2dd --relaxed -o dart_throwing_relaxed_1024.edat -n 1024 File dart_throwing_relaxed_1024.edat Pointset Fourier . / bin / samplers / DartThrowing_2dd --relaxed -o dart_throwing_relaxed_4096.edat -n 4096 File dart_throwing_relaxed_4096.edat Pointset Fourier","title":"Dart Throwing"},{"location":"sampler_dart_throwing/#sampler-dart-throwing-mf92","text":"Files src/samplers/SamplerDartThrowing.hpp src/bin/samplers/DartThrowing_2dd.cpp.cpp","title":"Sampler Dart Throwing [MF92]"},{"location":"sampler_dart_throwing/#description","text":"A naive (relaxed) dart throwing algorithm. For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html .","title":"Description"},{"location":"sampler_dart_throwing/#execution","text":"Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message --relaxed Use relaxed dart throwing To generate a 2D point set of 1024 samples with a dart_throwing distribution, we can use the following client line command: . / bin / samplers / DartThrowing_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerDartThrowing s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close ();","title":"Execution"},{"location":"sampler_dart_throwing/#results","text":". / bin / samplers / DartThrowing_2dd - o dart_throwing_1024 . edat - n 1024 File dart_throwing_1024.edat Pointset Fourier . / bin / samplers / DartThrowing_2dd - o dart_throwing_4096 . edat - n 4096 File dart_throwing_4096.edat Pointset Fourier . / bin / samplers / DartThrowing_2dd --relaxed -o dart_throwing_relaxed_1024.edat -n 1024 File dart_throwing_relaxed_1024.edat Pointset Fourier . / bin / samplers / DartThrowing_2dd --relaxed -o dart_throwing_relaxed_4096.edat -n 4096 File dart_throwing_relaxed_4096.edat Pointset Fourier","title":"Results"},{"location":"sampler_exhaustive_owen/","text":"Sampler Exhaustive Owen Files src/samplers/SamplerExhaustiveOwen.hpp src/bin/samplers/ExaustiveOwen_2dd.cpp.cpp Description Owen\u2019s scrambling uses a permutation tree in each dimension. This tree is usually randomly filled. For a set containing n samples, it contains N flags, with N=n-1. This sampler tests all 2^N possible trees (in each dimension) and returns the trees that generates the most Blue Noise like set. As this exhaustive search is very computationnally expensive, this sampler can only generate point sets of size n lesser than 32. Execution Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message To generate a 2D point set of 1024 samples with a exhaustive_owen distribution, we can use the following client line command: . / bin / samplers / ExhautiveOwen_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerExhaustiveOwen s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close (); Results . / bin / samplers / ExhautiveOwen_2dd - o exhaustive_owen_16 . edat - n 16 File exhaustive_owen_16.edat Pointset Fourier","title":"Sampler exhaustive owen"},{"location":"sampler_exhaustive_owen/#sampler-exhaustive-owen","text":"Files src/samplers/SamplerExhaustiveOwen.hpp src/bin/samplers/ExaustiveOwen_2dd.cpp.cpp","title":"Sampler Exhaustive Owen"},{"location":"sampler_exhaustive_owen/#description","text":"Owen\u2019s scrambling uses a permutation tree in each dimension. This tree is usually randomly filled. For a set containing n samples, it contains N flags, with N=n-1. This sampler tests all 2^N possible trees (in each dimension) and returns the trees that generates the most Blue Noise like set. As this exhaustive search is very computationnally expensive, this sampler can only generate point sets of size n lesser than 32.","title":"Description"},{"location":"sampler_exhaustive_owen/#execution","text":"Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message To generate a 2D point set of 1024 samples with a exhaustive_owen distribution, we can use the following client line command: . / bin / samplers / ExhautiveOwen_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerExhaustiveOwen s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close ();","title":"Execution"},{"location":"sampler_exhaustive_owen/#results","text":". / bin / samplers / ExhautiveOwen_2dd - o exhaustive_owen_16 . edat - n 16 File exhaustive_owen_16.edat Pointset Fourier","title":"Results"},{"location":"sampler_experimental/","text":"Experimental Samplers Exhaustive Owen Genetic Owen Gradient descent","title":"Sampler experimental"},{"location":"sampler_fastpoisson/","text":"Sampler Fast Poisson [Bri07] Files src/samplers/SamplerFastPoisson.hpp src/bin/samplers/FastPoisson_2dd.cpp.cpp Description The Fast Poisson sampler from [DH06] . For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html . Execution Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message --method [string = DartThrowing] The method to use to generate the samples (DartThrowing | Pure | LinearPure) --minmaxthrows [int = 100] set minimum number of maximum throws for DartThrowing sampler --mult [int = 1] set multiplier for DartThrowing sampler --tiled If set, use tiled domain To generate a 2D point set of 1024 samples with a fastpoisson distribution, we can use the following client line command: . / bin / samplers / FastPoisson_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerFastPoisson s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close (); Results Dart Throwing Method . / bin / samplers / FastPoisson_2dd - o fastpoisson_1024 . edat - n 1024 File fastpoisson_1024.edat Pointset Fourier . / bin / samplers / FastPoisson_2dd - o fastpoisson_4096 . edat - n 4096 File fastpoisson_4096.edat Pointset Fourier . / bin / samplers / FastPoisson_2dd --minmaxthrows 50 -o fastpoisson_50_1024.edat -n 1024 File fastpoisson_50_1024.edat Pointset Fourier . / bin / samplers / FastPoisson_2dd --minmaxthrows 200 -o fastpoisson_200_1024.edat -n 1024 File fastpoisson_200_1024.edat Pointset Fourier . / bin / samplers / FastPoisson_2dd --mult 2 -o fastpoisson_mult2_1024.edat -n 1024 File fastpoisson_mult2_1024.edat Pointset Fourier Pure Method . / bin / samplers / FastPoisson_2dd --method Pure -o fastpoisson_Pure_1024.edat -n 1024 File fastpoisson_Pure_1024.edat Pointset Fourier . / bin / samplers / FastPoisson_2dd --method Pure -o fastpoisson_Pure_4096.edat -n 4096 File fastpoisson_Pure_4096.edat Pointset Fourier Linear Pure Method . / bin / samplers / FastPoisson_2dd --method LinearPure -o fastpoisson_LinearPure_1024.edat -n 1024 File fastpoisson_LinearPure_1024.edat Pointset Fourier . / bin / samplers / FastPoisson_2dd --method LinearPure -o fastpoisson_LinearPure_4096.edat -n 4096 File fastpoisson_LinearPure_4096.edat Pointset Fourier","title":"Fast Poisson"},{"location":"sampler_fastpoisson/#sampler-fast-poisson-bri07","text":"Files src/samplers/SamplerFastPoisson.hpp src/bin/samplers/FastPoisson_2dd.cpp.cpp","title":"Sampler Fast Poisson [Bri07]"},{"location":"sampler_fastpoisson/#description","text":"The Fast Poisson sampler from [DH06] . For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html .","title":"Description"},{"location":"sampler_fastpoisson/#execution","text":"Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message --method [string = DartThrowing] The method to use to generate the samples (DartThrowing | Pure | LinearPure) --minmaxthrows [int = 100] set minimum number of maximum throws for DartThrowing sampler --mult [int = 1] set multiplier for DartThrowing sampler --tiled If set, use tiled domain To generate a 2D point set of 1024 samples with a fastpoisson distribution, we can use the following client line command: . / bin / samplers / FastPoisson_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerFastPoisson s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close ();","title":"Execution"},{"location":"sampler_fastpoisson/#results","text":"Dart Throwing Method . / bin / samplers / FastPoisson_2dd - o fastpoisson_1024 . edat - n 1024 File fastpoisson_1024.edat Pointset Fourier . / bin / samplers / FastPoisson_2dd - o fastpoisson_4096 . edat - n 4096 File fastpoisson_4096.edat Pointset Fourier . / bin / samplers / FastPoisson_2dd --minmaxthrows 50 -o fastpoisson_50_1024.edat -n 1024 File fastpoisson_50_1024.edat Pointset Fourier . / bin / samplers / FastPoisson_2dd --minmaxthrows 200 -o fastpoisson_200_1024.edat -n 1024 File fastpoisson_200_1024.edat Pointset Fourier . / bin / samplers / FastPoisson_2dd --mult 2 -o fastpoisson_mult2_1024.edat -n 1024 File fastpoisson_mult2_1024.edat Pointset Fourier Pure Method . / bin / samplers / FastPoisson_2dd --method Pure -o fastpoisson_Pure_1024.edat -n 1024 File fastpoisson_Pure_1024.edat Pointset Fourier . / bin / samplers / FastPoisson_2dd --method Pure -o fastpoisson_Pure_4096.edat -n 4096 File fastpoisson_Pure_4096.edat Pointset Fourier Linear Pure Method . / bin / samplers / FastPoisson_2dd --method LinearPure -o fastpoisson_LinearPure_1024.edat -n 1024 File fastpoisson_LinearPure_1024.edat Pointset Fourier . / bin / samplers / FastPoisson_2dd --method LinearPure -o fastpoisson_LinearPure_4096.edat -n 4096 File fastpoisson_LinearPure_4096.edat Pointset Fourier","title":"Results"},{"location":"sampler_faure/","text":"Sampler Faure [Fau82] Files src / samplers / SamplerFaure . hpp src / bin / samplers / Faure_2d * . cpp . cpp Description The Faure sequence (2D only). For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html . License GNU LGPL , code from https://people.sc.fsu.edu/~jburkardt/cpp_src/faure/faure.html Execution Parameters : [ HELP ] - o [ string=output_pts.dat ] Output file - m [ int=1 ] Number of poinset realisations - n [ ullint=1024 ] Number of samples to generate --silent Silent mode - h Displays this help message To generate a 2D point set of 1024 samples with a faure distribution, we can use the following client line command: . / bin / samplers / Faure_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerFaure s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close (); Results . / bin / samplers / Faure_2dd - o faure_1024 . edat - n 1024 File faure_1024.edat Pointset Fourier . / bin / samplers / Faure_2dd - o faure_4096 . edat - n 4096 File faure_4096.edat Pointset Fourier","title":"Faure"},{"location":"sampler_faure/#sampler-faure-fau82","text":"","title":"Sampler Faure [Fau82]"},{"location":"sampler_faure/#files","text":"src / samplers / SamplerFaure . hpp src / bin / samplers / Faure_2d * . cpp . cpp","title":"Files"},{"location":"sampler_faure/#description","text":"The Faure sequence (2D only). For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html .","title":"Description"},{"location":"sampler_faure/#license","text":"GNU LGPL , code from https://people.sc.fsu.edu/~jburkardt/cpp_src/faure/faure.html","title":"License"},{"location":"sampler_faure/#execution","text":"Parameters : [ HELP ] - o [ string=output_pts.dat ] Output file - m [ int=1 ] Number of poinset realisations - n [ ullint=1024 ] Number of samples to generate --silent Silent mode - h Displays this help message To generate a 2D point set of 1024 samples with a faure distribution, we can use the following client line command: . / bin / samplers / Faure_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerFaure s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close ();","title":"Execution"},{"location":"sampler_faure/#results","text":". / bin / samplers / Faure_2dd - o faure_1024 . edat - n 1024","title":"Results"},{"location":"sampler_faure/#file","text":"faure_1024.edat","title":"File"},{"location":"sampler_faure/#pointset","text":"","title":"Pointset"},{"location":"sampler_faure/#fourier","text":". / bin / samplers / Faure_2dd - o faure_4096 . edat - n 4096","title":"Fourier"},{"location":"sampler_faure/#file_1","text":"faure_4096.edat","title":"File"},{"location":"sampler_faure/#pointset_1","text":"","title":"Pointset"},{"location":"sampler_faure/#fourier_1","text":"","title":"Fourier"},{"location":"sampler_forced_random/","text":"Sampler Forced Random [CTS*17] Files src/samplers/SamplerForcedRandom.hpp src/bin/samplers/ForcedRandom_2dd.cpp.cpp Description A sampler based on dithering matrices from [CTS*17] . Execution Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message --matrix [int = 512] the matrix size [512 | 1024 | 2048] --sparsity [int = 8] the matrix sparsity To generate a 2D point set of 1024 samples with a forced_random distribution, we can use the following client line command: . / bin / samplers / ForcedRandom_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerForcedRandom s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close (); Results . / bin / samplers / ForcedRandom_2dd - o forced_random_1024 . edat - n 1024 File forced_random_1024.edat Pointset Fourier . / bin / samplers / ForcedRandom_2dd - o forced_random_4096 . edat - n 4096 File forced_random_4096.edat Pointset Fourier","title":"Forced Random"},{"location":"sampler_forced_random/#sampler-forced-random-cts17","text":"Files src/samplers/SamplerForcedRandom.hpp src/bin/samplers/ForcedRandom_2dd.cpp.cpp","title":"Sampler Forced Random [CTS*17]"},{"location":"sampler_forced_random/#description","text":"A sampler based on dithering matrices from [CTS*17] .","title":"Description"},{"location":"sampler_forced_random/#execution","text":"Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message --matrix [int = 512] the matrix size [512 | 1024 | 2048] --sparsity [int = 8] the matrix sparsity To generate a 2D point set of 1024 samples with a forced_random distribution, we can use the following client line command: . / bin / samplers / ForcedRandom_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerForcedRandom s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close ();","title":"Execution"},{"location":"sampler_forced_random/#results","text":". / bin / samplers / ForcedRandom_2dd - o forced_random_1024 . edat - n 1024 File forced_random_1024.edat Pointset Fourier . / bin / samplers / ForcedRandom_2dd - o forced_random_4096 . edat - n 4096 File forced_random_4096.edat Pointset Fourier","title":"Results"},{"location":"sampler_genetic_owen/","text":"Sampler Genetic Owen Files src/samplers/SamplerGeneticOwen.hpp src/bin/samplers/GeneticOwen_2dd.cpp.cpp Description Owen\u2019s scrambling uses a permutation tree in each dimension. This tree is usually randomly filled. For a set containing n samples, it contains N flags, with N=n-1. This leads to 2^N possible trees in each dimension, which is too computationnally expensive for an exhaustive search. This sampler thus uses genetic algorithms to try and find the best possible tree generating Blue Noise sets. However, the algorithm is too naive to generate good Blue Noise sets for more than 128 samples. Execution Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message --iter [int = 1000] the number of iterations To generate a 2D point set of 1024 samples with a genetic_owen distribution, we can use the following client line command: . / bin / samplers / GeneticOwen_2dd --iter 200 -n 1024 -o toto.dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerGeneticOwen s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close (); Results . / bin / samplers / GeneticOwen_2dd --iter 200 -o genetic_owen_64.edat -n 64 File genetic_owen_64.edat Pointset Fourier . / bin / samplers / GeneticOwen_2dd --iter 200 -o genetic_owen_128.edat -n 128 File genetic_owen_128.edat Pointset Fourier","title":"Sampler genetic owen"},{"location":"sampler_genetic_owen/#sampler-genetic-owen","text":"Files src/samplers/SamplerGeneticOwen.hpp src/bin/samplers/GeneticOwen_2dd.cpp.cpp","title":"Sampler Genetic Owen"},{"location":"sampler_genetic_owen/#description","text":"Owen\u2019s scrambling uses a permutation tree in each dimension. This tree is usually randomly filled. For a set containing n samples, it contains N flags, with N=n-1. This leads to 2^N possible trees in each dimension, which is too computationnally expensive for an exhaustive search. This sampler thus uses genetic algorithms to try and find the best possible tree generating Blue Noise sets. However, the algorithm is too naive to generate good Blue Noise sets for more than 128 samples.","title":"Description"},{"location":"sampler_genetic_owen/#execution","text":"Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message --iter [int = 1000] the number of iterations To generate a 2D point set of 1024 samples with a genetic_owen distribution, we can use the following client line command: . / bin / samplers / GeneticOwen_2dd --iter 200 -n 1024 -o toto.dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerGeneticOwen s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close ();","title":"Execution"},{"location":"sampler_genetic_owen/#results","text":". / bin / samplers / GeneticOwen_2dd --iter 200 -o genetic_owen_64.edat -n 64 File genetic_owen_64.edat Pointset Fourier . / bin / samplers / GeneticOwen_2dd --iter 200 -o genetic_owen_128.edat -n 128 File genetic_owen_128.edat Pointset Fourier","title":"Results"},{"location":"sampler_gradient_descent/","text":"Sampler Gradient Descent Files src/samplers/SamplerGradientDescent.hpp src/bin/samplers/GradientDescent_2dd.cpp.cpp Description This sampler optimizes a given input sampler to minimize its Generalized L2 discrepancy, using gradient descent. This optimizing is very slow and therefore can hardly be performed on more than 4k samples. Execution Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message -i [string] The pointset to optimize To optimize the discrepancy of a 2D point set using gradient descent, we can use the following client line command: . / bin / samplers / GradientDescent_2dd - i bnot128 . dat - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerGradientDescent s ; s . setInputPointset ( \"bnot128.dat\" ); s . generateSamples < 2 , double , Point < 2 , double > > ( pts ); writer . writePointset ( pts ); writer . close (); Results . / bin / samplers / GradientDescent_2dd - i bnot128 . dat - o optimbnot_128 . edat Initial File bnot128.dat Initial Pointset Initial Fourier Optimized File optimbnot_128.edat Optimized Pointset Optimized Fourier . / bin / samplers / GradientDescent_2dd - i bnot1024 . dat - o optimbnot_1024 . edat Initial File bnot1024.dat Initial Pointset Initial Fourier Optimized File optimbnot_1024.edat Optimized Pointset Optimized Fourier Discrepancy Graph","title":"Sampler gradient descent"},{"location":"sampler_gradient_descent/#sampler-gradient-descent","text":"Files src/samplers/SamplerGradientDescent.hpp src/bin/samplers/GradientDescent_2dd.cpp.cpp","title":"Sampler Gradient Descent"},{"location":"sampler_gradient_descent/#description","text":"This sampler optimizes a given input sampler to minimize its Generalized L2 discrepancy, using gradient descent. This optimizing is very slow and therefore can hardly be performed on more than 4k samples.","title":"Description"},{"location":"sampler_gradient_descent/#execution","text":"Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message -i [string] The pointset to optimize To optimize the discrepancy of a 2D point set using gradient descent, we can use the following client line command: . / bin / samplers / GradientDescent_2dd - i bnot128 . dat - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerGradientDescent s ; s . setInputPointset ( \"bnot128.dat\" ); s . generateSamples < 2 , double , Point < 2 , double > > ( pts ); writer . writePointset ( pts ); writer . close ();","title":"Execution"},{"location":"sampler_gradient_descent/#results","text":". / bin / samplers / GradientDescent_2dd - i bnot128 . dat - o optimbnot_128 . edat Initial File bnot128.dat Initial Pointset Initial Fourier Optimized File optimbnot_128.edat Optimized Pointset Optimized Fourier . / bin / samplers / GradientDescent_2dd - i bnot1024 . dat - o optimbnot_1024 . edat Initial File bnot1024.dat Initial Pointset Initial Fourier Optimized File optimbnot_1024.edat Optimized Pointset Optimized Fourier Discrepancy Graph","title":"Results"},{"location":"sampler_halton/","text":"Sampler Halton [Hal64] Files src / samplers / SamplerHalton . hpp src / bin / samplers / Halton_ * d * . cpp . cpp Description The Halton sequence. Samples are generated from reversing the n-ary representation of their index. Each dimension has a different basis and the low discrepancy is ensured if all basis are distinct and are prime numbers. For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html . License BSD license, see the SamplerHalton . hpp file. Execution Parameters : [ HELP ] - o [ string = output_pts . dat ] Output file - m [ int = 1 ] Number of poinset realisations - n [ ullint = 1024 ] Number of samples to generate -- silent Silent mode - h Displays this help message - x [ uint = 2 ] the basis for the first dimension - y [ uint = 3 ] the basis for the second dimension To generate a 2D point set of 1024 samples with a halton distribution, we can use the following client line command: . / bin / samplers / Halton_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerHalton s ; unsigned int param_nbsamples = 1024 ; unsigned int bases [ 2 ] = { 2 , 3 }; s . setBaseList ( & bases [ 0 ], 2 ); s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close (); Results . / bin / samplers / Halton_2dd - o halton_1024 . edat - n 1024 File halton_1024.edat Pointset Fourier . / bin / samplers / Halton_2dd - o halton_4096 . edat - n 4096 File halton_4096.edat Pointset Fourier . / bin / samplers / Halton_2dd - x 5 - y 7 - o halton_57_1024 . edat - n 1024 File halton_57_1024.edat Pointset Fourier When the basis are not relatively prime, the low discrepancy property is broken. . / bin / samplers / Halton_2dd - x 3 - y 6 - o halton_36_1024 . edat - n 1024 File halton_36 _1024.edat Pointset Fourier","title":"Halton"},{"location":"sampler_halton/#sampler-halton-hal64","text":"","title":"Sampler Halton [Hal64]"},{"location":"sampler_halton/#files","text":"src / samplers / SamplerHalton . hpp src / bin / samplers / Halton_ * d * . cpp . cpp","title":"Files"},{"location":"sampler_halton/#description","text":"The Halton sequence. Samples are generated from reversing the n-ary representation of their index. Each dimension has a different basis and the low discrepancy is ensured if all basis are distinct and are prime numbers. For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html .","title":"Description"},{"location":"sampler_halton/#license","text":"BSD license, see the SamplerHalton . hpp file.","title":"License"},{"location":"sampler_halton/#execution","text":"Parameters : [ HELP ] - o [ string = output_pts . dat ] Output file - m [ int = 1 ] Number of poinset realisations - n [ ullint = 1024 ] Number of samples to generate -- silent Silent mode - h Displays this help message - x [ uint = 2 ] the basis for the first dimension - y [ uint = 3 ] the basis for the second dimension To generate a 2D point set of 1024 samples with a halton distribution, we can use the following client line command: . / bin / samplers / Halton_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerHalton s ; unsigned int param_nbsamples = 1024 ; unsigned int bases [ 2 ] = { 2 , 3 }; s . setBaseList ( & bases [ 0 ], 2 ); s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close ();","title":"Execution"},{"location":"sampler_halton/#results","text":". / bin / samplers / Halton_2dd - o halton_1024 . edat - n 1024 File halton_1024.edat Pointset Fourier . / bin / samplers / Halton_2dd - o halton_4096 . edat - n 4096 File halton_4096.edat Pointset Fourier . / bin / samplers / Halton_2dd - x 5 - y 7 - o halton_57_1024 . edat - n 1024 File halton_57_1024.edat Pointset Fourier When the basis are not relatively prime, the low discrepancy property is broken. . / bin / samplers / Halton_2dd - x 3 - y 6 - o halton_36_1024 . edat - n 1024 File halton_36 _1024.edat Pointset Fourier","title":"Results"},{"location":"sampler_hammersley/","text":"Sampler Hammersley [Ham60] Files src / samplers / SamplerHammersley . hpp src / bin / samplers / Hammersley_2d * . cpp . cpp Description The Hammersley sampler. This sampler is only 2D, with the first coordinate obtained by dividing the index of the sample by the total number of samples, and the second coordinate obtained by reversing the binary representation of the index. For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html . License BSD, see SamplerHammersley . hpp . Execution Parameters : [ HELP ] - o [ string=output_pts.dat ] Output file - m [ int=1 ] Number of poinset realisations - n [ ullint=1024 ] Number of samples to generate --silent Silent mode - h Displays this help message To generate a 2D point set of 1024 samples with a hammersley distribution, we can use the following client line command: . / bin / samplers / Hammersley_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerHammersley s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close (); Results . / bin / samplers / Hammersley_2dd - o hammersley_1024 . edat - n 1024 File hammersley_1024.edat Pointset Fourier . / bin / samplers / Hammersley_2dd - o hammersley_4096 . edat - n 4096 File hammersley_4096.edat Pointset Fourier","title":"Hammersley"},{"location":"sampler_hammersley/#sampler-hammersley-ham60","text":"","title":"Sampler Hammersley [Ham60]"},{"location":"sampler_hammersley/#files","text":"src / samplers / SamplerHammersley . hpp src / bin / samplers / Hammersley_2d * . cpp . cpp","title":"Files"},{"location":"sampler_hammersley/#description","text":"The Hammersley sampler. This sampler is only 2D, with the first coordinate obtained by dividing the index of the sample by the total number of samples, and the second coordinate obtained by reversing the binary representation of the index. For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html .","title":"Description"},{"location":"sampler_hammersley/#license","text":"BSD, see SamplerHammersley . hpp .","title":"License"},{"location":"sampler_hammersley/#execution","text":"Parameters : [ HELP ] - o [ string=output_pts.dat ] Output file - m [ int=1 ] Number of poinset realisations - n [ ullint=1024 ] Number of samples to generate --silent Silent mode - h Displays this help message To generate a 2D point set of 1024 samples with a hammersley distribution, we can use the following client line command: . / bin / samplers / Hammersley_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerHammersley s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close ();","title":"Execution"},{"location":"sampler_hammersley/#results","text":". / bin / samplers / Hammersley_2dd - o hammersley_1024 . edat - n 1024 File hammersley_1024.edat Pointset Fourier . / bin / samplers / Hammersley_2dd - o hammersley_4096 . edat - n 4096 File hammersley_4096.edat Pointset Fourier","title":"Results"},{"location":"sampler_hexagonal_grid/","text":"Sampler Hexagonal Grid Files src/samplers/SamplerHexagonalGrid.hpp src/bin/samplers/HexagonalGrid_2dd.cpp.cpp Description An hexagonal grid. For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html . Execution Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message To generate a 2D point set of 1024 samples with a hexagonal_grid distribution, we can use the following client line command: . / bin / samplers / HexagonalGrid_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerHexagonalGrid s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close (); Results . / bin / samplers / HexagonalGrid_2dd - o hexagonal_grid_1024 . edat - n 1024 File hexagonal_grid_1024.edat Pointset Fourier . / bin / samplers / HexagonalGrid_2dd - o hexagonal_grid_4096 . edat - n 4096 File hexagonal_grid_4096.edat Pointset Fourier","title":"Hexagonal grid"},{"location":"sampler_hexagonal_grid/#sampler-hexagonal-grid","text":"Files src/samplers/SamplerHexagonalGrid.hpp src/bin/samplers/HexagonalGrid_2dd.cpp.cpp","title":"Sampler Hexagonal Grid"},{"location":"sampler_hexagonal_grid/#description","text":"An hexagonal grid. For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html .","title":"Description"},{"location":"sampler_hexagonal_grid/#execution","text":"Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message To generate a 2D point set of 1024 samples with a hexagonal_grid distribution, we can use the following client line command: . / bin / samplers / HexagonalGrid_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerHexagonalGrid s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close ();","title":"Execution"},{"location":"sampler_hexagonal_grid/#results","text":". / bin / samplers / HexagonalGrid_2dd - o hexagonal_grid_1024 . edat - n 1024 File hexagonal_grid_1024.edat Pointset Fourier . / bin / samplers / HexagonalGrid_2dd - o hexagonal_grid_4096 . edat - n 4096 File hexagonal_grid_4096.edat Pointset Fourier","title":"Results"},{"location":"sampler_korobov/","text":"Sampler Korobov [Kor59] Files src/samplers/SamplerKorobov.hpp src/bin/samplers/Korobov_2dd.cpp.cpp Description Korobov lattices. The generator value should be prime relatively to the number of samples, otherwise the point set will not be projection regular. For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html . Execution Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message -a [uint = 3] The generator value To generate a 2D point set of 1024 samples with a korobov distribution, we can use the following client line command: . / bin / samplers / Korobov_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerKorobov s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close (); Results . / bin / samplers / Korobov_2dd - o korobov_1024 . edat - n 1024 File korobov_1024.edat Pointset Fourier . / bin / samplers / Korobov_2dd - o korobov_4096 . edat - n 4096 File korobov_4096.edat Pointset Fourier . / bin / samplers / Korobov_2dd - a 89 - o korobov_89_1024 . edat - n 1024 File korobov_89_1024.edat Pointset Fourier . / bin / samplers / Korobov_2dd - a 419 - o korobov_419_1024 . edat - n 1024 File korobov_419_1024.edat Pointset Fourier . / bin / samplers / Korobov_2dd - a 787 - o korobov_787_1024 . edat - n 1024 File korobov_787_1024.edat Pointset Fourier . / bin / samplers / Korobov_2dd - a 2659 - o korobov_2659_1024 . edat - n 1024 File korobov_2659_1024.edat Pointset Fourier","title":"Korobov"},{"location":"sampler_korobov/#sampler-korobov-kor59","text":"Files src/samplers/SamplerKorobov.hpp src/bin/samplers/Korobov_2dd.cpp.cpp","title":"Sampler Korobov [Kor59]"},{"location":"sampler_korobov/#description","text":"Korobov lattices. The generator value should be prime relatively to the number of samples, otherwise the point set will not be projection regular. For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html .","title":"Description"},{"location":"sampler_korobov/#execution","text":"Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message -a [uint = 3] The generator value To generate a 2D point set of 1024 samples with a korobov distribution, we can use the following client line command: . / bin / samplers / Korobov_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerKorobov s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close ();","title":"Execution"},{"location":"sampler_korobov/#results","text":". / bin / samplers / Korobov_2dd - o korobov_1024 . edat - n 1024 File korobov_1024.edat Pointset Fourier . / bin / samplers / Korobov_2dd - o korobov_4096 . edat - n 4096 File korobov_4096.edat Pointset Fourier . / bin / samplers / Korobov_2dd - a 89 - o korobov_89_1024 . edat - n 1024 File korobov_89_1024.edat Pointset Fourier . / bin / samplers / Korobov_2dd - a 419 - o korobov_419_1024 . edat - n 1024 File korobov_419_1024.edat Pointset Fourier . / bin / samplers / Korobov_2dd - a 787 - o korobov_787_1024 . edat - n 1024 File korobov_787_1024.edat Pointset Fourier . / bin / samplers / Korobov_2dd - a 2659 - o korobov_2659_1024 . edat - n 1024 File korobov_2659_1024.edat Pointset Fourier","title":"Results"},{"location":"sampler_ldbn/","text":"Sampler LDBN [APC*16] Files src/samplers/SamplerLDBN.hpp src/bin/samplers/LDBN_2dd.cpp.cpp Description The LDBN sampler from [APC*16] . This sampler is only 2D. For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html . Execution Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message -d [string] File containing the permutations -t [uint = 128] The size of the permutation tile -c [uint = 16] The size of the permutation chunk To generate a 2D point set of 1024 samples with a ldbn distribution, we can use the following client line command: . / bin / samplers / LDBN_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerLDBN s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close (); Results . / bin / samplers / LDBN_2dd - o ldbn_1024 . edat - n 1024 File ldbn_1024.edat Pointset Fourier . / bin / samplers / LDBN_2dd - o ldbn_4096 . edat - n 4096 File ldbn_4096.edat Pointset Fourier Changing the chunk size affects the Blue Noise property of the final set . / bin / samplers / LDBN_2dd - t 128 - c 1 - o ldbn_128_1_1024 . edat - n 1024 File ldbn_128_1_1024.edat Pointset Fourier . / bin / samplers / LDBN_2dd - t 128 - c 4 - o ldbn_128_4_1024 . edat - n 1024 File ldbn_128_4_1024.edat Pointset Fourier . / bin / samplers / LDBN_2dd - t 128 - c 8 - o ldbn_128_8_1024 . edat - n 1024 File ldbn_128_8_1024.edat Pointset Fourier . / bin / samplers / LDBN_2dd - t 128 - c 32 - o ldbn_128_32_1024 . edat - n 1024 File ldbn_128_32_1024.edat Pointset Fourier . / bin / samplers / LDBN_2dd - t 128 - c 64 - o ldbn_128_64_1024 . edat - n 1024 File ldbn_128_64_1024.edat Pointset Fourier One can also change the final spectrum to generate a step disctribution instead. . / bin / samplers / LDBN_2dd - t 128 - c 16 - o ldbn_step_1024 . edat - n 1024 - d .. / .. / data / LDBN / tables_Step / tilesize_128 / chunksize_m016 . dat File ldbn_step_1024.edat Pointset Fourier","title":"LDBN"},{"location":"sampler_ldbn/#sampler-ldbn-apc16","text":"Files src/samplers/SamplerLDBN.hpp src/bin/samplers/LDBN_2dd.cpp.cpp","title":"Sampler LDBN [APC*16]"},{"location":"sampler_ldbn/#description","text":"The LDBN sampler from [APC*16] . This sampler is only 2D. For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html .","title":"Description"},{"location":"sampler_ldbn/#execution","text":"Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message -d [string] File containing the permutations -t [uint = 128] The size of the permutation tile -c [uint = 16] The size of the permutation chunk To generate a 2D point set of 1024 samples with a ldbn distribution, we can use the following client line command: . / bin / samplers / LDBN_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerLDBN s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close ();","title":"Execution"},{"location":"sampler_ldbn/#results","text":". / bin / samplers / LDBN_2dd - o ldbn_1024 . edat - n 1024 File ldbn_1024.edat Pointset Fourier . / bin / samplers / LDBN_2dd - o ldbn_4096 . edat - n 4096 File ldbn_4096.edat Pointset Fourier Changing the chunk size affects the Blue Noise property of the final set . / bin / samplers / LDBN_2dd - t 128 - c 1 - o ldbn_128_1_1024 . edat - n 1024 File ldbn_128_1_1024.edat Pointset Fourier . / bin / samplers / LDBN_2dd - t 128 - c 4 - o ldbn_128_4_1024 . edat - n 1024 File ldbn_128_4_1024.edat Pointset Fourier . / bin / samplers / LDBN_2dd - t 128 - c 8 - o ldbn_128_8_1024 . edat - n 1024 File ldbn_128_8_1024.edat Pointset Fourier . / bin / samplers / LDBN_2dd - t 128 - c 32 - o ldbn_128_32_1024 . edat - n 1024 File ldbn_128_32_1024.edat Pointset Fourier . / bin / samplers / LDBN_2dd - t 128 - c 64 - o ldbn_128_64_1024 . edat - n 1024 File ldbn_128_64_1024.edat Pointset Fourier One can also change the final spectrum to generate a step disctribution instead. . / bin / samplers / LDBN_2dd - t 128 - c 16 - o ldbn_step_1024 . edat - n 1024 - d .. / .. / data / LDBN / tables_Step / tilesize_128 / chunksize_m016 . dat File ldbn_step_1024.edat Pointset Fourier","title":"Results"},{"location":"sampler_lowdisc/","text":"Low Discrepancy Samplers Faure Halton Hammersley LDBN Projection scrambling Niederreiter Owen Sobol (code from [JK03] ) Sobol (Original)","title":"Sampler lowdisc"},{"location":"sampler_multijitter/","text":"Sampler Multi Jittered [CSW94] Files src/samplers/SamplerMultiJitter.hpp src/bin/samplers/MultiJitter_2dd.cpp.cpp Description The Multi-Jitter sampler from [CSW94] . For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html . Execution Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message To generate a 2D point set of 1024 samples with a multijitter distribution, we can use the following client line command: . / bin / samplers / MultiJitter_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerMultiJitter s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close (); Results . / bin / samplers / MultiJitter_2dd - o multijitter_1024 . edat - n 1024 File multijitter_1024.edat Pointset Fourier . / bin / samplers / MultiJitter_2dd - o multijitter_4096 . edat - n 4096 File multijitter_4096.edat Pointset Fourier","title":"Sampler multijitter"},{"location":"sampler_multijitter/#sampler-multi-jittered-csw94","text":"Files src/samplers/SamplerMultiJitter.hpp src/bin/samplers/MultiJitter_2dd.cpp.cpp","title":"Sampler Multi Jittered [CSW94]"},{"location":"sampler_multijitter/#description","text":"The Multi-Jitter sampler from [CSW94] . For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html .","title":"Description"},{"location":"sampler_multijitter/#execution","text":"Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message To generate a 2D point set of 1024 samples with a multijitter distribution, we can use the following client line command: . / bin / samplers / MultiJitter_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerMultiJitter s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close ();","title":"Execution"},{"location":"sampler_multijitter/#results","text":". / bin / samplers / MultiJitter_2dd - o multijitter_1024 . edat - n 1024 File multijitter_1024.edat Pointset Fourier . / bin / samplers / MultiJitter_2dd - o multijitter_4096 . edat - n 4096 File multijitter_4096.edat Pointset Fourier","title":"Results"},{"location":"sampler_niederreiter/","text":"Sampler Niederreiter [Nie88] Files src / samplers / SamplerNiederreiter . hpp src / bin / samplers / Niederreiter_ * dd . cpp . cpp Description The Niederreiter sequence. For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html . License LGPL, code from https://people.sc.fsu.edu/~jburkardt/cpp_src/niederreiter2/niederreiter2.html Execution Parameters : [ HELP ] - o [ string=output_pts.dat ] Output file - m [ int=1 ] Number of poinset realisations - n [ ullint=1024 ] Number of samples to generate --silent Silent mode - h Displays this help message - b [ uint=2 ] Basis To generate a 2D point set of 1024 samples with a nieddereiter distribution, we can use the following client line command: . / bin / samplers / Niederreiter_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerNiederreiter s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close (); Results . / bin / samplers / Niederreiter_2dd - o nieddereiter_1024 . edat - n 1024 File nieddereiter_1024.edat Pointset Fourier . / bin / samplers / Niederreiter_2dd - o nieddereiter_4096 . edat - n 4096 File nieddereiter_4096.edat Pointset Fourier . / bin / samplers / Niederreiter_2dd - b 3 - o nieddereiter_b3_1024 . edat - n 1024 File nieddereiter_b3_1024.edat Pointset Fourier . / bin / samplers / Niederreiter_2dd - b 5 - o nieddereiter_b5_1024 . edat - n 1024 File nieddereiter_b5_1024.edat Pointset Fourier","title":"Niederreiter"},{"location":"sampler_niederreiter/#sampler-niederreiter-nie88","text":"","title":"Sampler Niederreiter [Nie88]"},{"location":"sampler_niederreiter/#files","text":"src / samplers / SamplerNiederreiter . hpp src / bin / samplers / Niederreiter_ * dd . cpp . cpp","title":"Files"},{"location":"sampler_niederreiter/#description","text":"The Niederreiter sequence. For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html .","title":"Description"},{"location":"sampler_niederreiter/#license","text":"LGPL, code from https://people.sc.fsu.edu/~jburkardt/cpp_src/niederreiter2/niederreiter2.html","title":"License"},{"location":"sampler_niederreiter/#execution","text":"Parameters : [ HELP ] - o [ string=output_pts.dat ] Output file - m [ int=1 ] Number of poinset realisations - n [ ullint=1024 ] Number of samples to generate --silent Silent mode - h Displays this help message - b [ uint=2 ] Basis To generate a 2D point set of 1024 samples with a nieddereiter distribution, we can use the following client line command: . / bin / samplers / Niederreiter_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerNiederreiter s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close ();","title":"Execution"},{"location":"sampler_niederreiter/#results","text":". / bin / samplers / Niederreiter_2dd - o nieddereiter_1024 . edat - n 1024 File nieddereiter_1024.edat Pointset Fourier . / bin / samplers / Niederreiter_2dd - o nieddereiter_4096 . edat - n 4096 File nieddereiter_4096.edat Pointset Fourier . / bin / samplers / Niederreiter_2dd - b 3 - o nieddereiter_b3_1024 . edat - n 1024 File nieddereiter_b3_1024.edat Pointset Fourier . / bin / samplers / Niederreiter_2dd - b 5 - o nieddereiter_b5_1024 . edat - n 1024 File nieddereiter_b5_1024.edat Pointset Fourier","title":"Results"},{"location":"sampler_nrooks/","text":"Sampler N-Rooks [Shi91] Files src/samplers/SamplerNRooks.hpp src/bin/samplers/NRooks_*dd.cpp.cpp Description The N-Rooks sampler. For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html . Execution Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message To generate a 2D point set of 1024 samples with a nrooks distribution, we can use the following client line command: . / bin / samplers / NRooks_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerNRooks s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close (); Results . / bin / samplers / NRooks_2dd - o nrooks_1024 . edat - n 1024 File nrooks_1024.edat Pointset Fourier . / bin / samplers / NRooks_2dd - o nrooks_4096 . edat - n 4096 File nrooks_4096.edat Pointset Fourier","title":"NRooks"},{"location":"sampler_nrooks/#sampler-n-rooks-shi91","text":"Files src/samplers/SamplerNRooks.hpp src/bin/samplers/NRooks_*dd.cpp.cpp","title":"Sampler N-Rooks [Shi91]"},{"location":"sampler_nrooks/#description","text":"The N-Rooks sampler. For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html .","title":"Description"},{"location":"sampler_nrooks/#execution","text":"Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message To generate a 2D point set of 1024 samples with a nrooks distribution, we can use the following client line command: . / bin / samplers / NRooks_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerNRooks s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close ();","title":"Execution"},{"location":"sampler_nrooks/#results","text":". / bin / samplers / NRooks_2dd - o nrooks_1024 . edat - n 1024 File nrooks_1024.edat Pointset Fourier . / bin / samplers / NRooks_2dd - o nrooks_4096 . edat - n 4096 File nrooks_4096.edat Pointset Fourier","title":"Results"},{"location":"sampler_other/","text":"Other Samplers CMJ Hexagonal Grid Korobov NRooks Rank 1 Regular Grid Single Peak Step Stratified Whitenoise","title":"Sampler other"},{"location":"sampler_owen/","text":"Sampler Owen [Owe95] Files src / samplers / SamplerOwenSobol . hpp src / bin / samplers / Owen_ * d * . cpp . cpp Description Owen\u2019s scrambling of the Sobol sequence. For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html . License BSD, see SamplerOwenSobol . hpp . Execution Parameters : [ HELP ] - o [ string=output_pts.dat ] Output file - m [ int=1 ] Number of poinset realisations - n [ ullint=1024 ] Number of samples to generate --silent Silent mode - h Displays this help message To generate a 2D point set of 1024 samples with a owen distribution, we can use the following client line command: . / bin / samplers / Owen_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerOwen s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close (); Results . / bin / samplers / Owen_2dd - o owen_1024 . edat - n 1024 File owen_1024.edat Pointset Fourier . / bin / samplers / Owen_2dd - o owen_4096 . edat - n 4096 File owen_4096.edat Pointset Fourier","title":"Owen Scrambled Sobol"},{"location":"sampler_owen/#sampler-owen-owe95","text":"","title":"Sampler Owen [Owe95]"},{"location":"sampler_owen/#files","text":"src / samplers / SamplerOwenSobol . hpp src / bin / samplers / Owen_ * d * . cpp . cpp","title":"Files"},{"location":"sampler_owen/#description","text":"Owen\u2019s scrambling of the Sobol sequence. For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html .","title":"Description"},{"location":"sampler_owen/#license","text":"BSD, see SamplerOwenSobol . hpp .","title":"License"},{"location":"sampler_owen/#execution","text":"Parameters : [ HELP ] - o [ string=output_pts.dat ] Output file - m [ int=1 ] Number of poinset realisations - n [ ullint=1024 ] Number of samples to generate --silent Silent mode - h Displays this help message To generate a 2D point set of 1024 samples with a owen distribution, we can use the following client line command: . / bin / samplers / Owen_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerOwen s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close ();","title":"Execution"},{"location":"sampler_owen/#results","text":". / bin / samplers / Owen_2dd - o owen_1024 . edat - n 1024 File owen_1024.edat Pointset Fourier . / bin / samplers / Owen_2dd - o owen_4096 . edat - n 4096 File owen_4096.edat Pointset Fourier","title":"Results"},{"location":"sampler_penrose/","text":"Sampler Penrose [ODJ04] Files src/samplers/SamplerPenrose.hpp src/bin/samplers/Penrose_2dd.cpp.cpp Description The Penrose sampler from [ODJ04] . For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html . Execution Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message To generate a 2D point set of 1024 samples with a penrose distribution, we can use the following client line command: . / bin / samplers / Penrose_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerPenrose s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close (); Results . / bin / samplers / Penrose_2dd - o penrose_1024 . edat - n 1024 File penrose_1024.edat Pointset Fourier . / bin / samplers / Penrose_2dd - o penrose_4096 . edat - n 4096 File penrose_4096.edat Pointset Fourier","title":"Penrose"},{"location":"sampler_penrose/#sampler-penrose-odj04","text":"Files src/samplers/SamplerPenrose.hpp src/bin/samplers/Penrose_2dd.cpp.cpp","title":"Sampler Penrose [ODJ04]"},{"location":"sampler_penrose/#description","text":"The Penrose sampler from [ODJ04] . For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html .","title":"Description"},{"location":"sampler_penrose/#execution","text":"Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message To generate a 2D point set of 1024 samples with a penrose distribution, we can use the following client line command: . / bin / samplers / Penrose_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerPenrose s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close ();","title":"Execution"},{"location":"sampler_penrose/#results","text":". / bin / samplers / Penrose_2dd - o penrose_1024 . edat - n 1024 File penrose_1024.edat Pointset Fourier . / bin / samplers / Penrose_2dd - o penrose_4096 . edat - n 4096 File penrose_4096.edat Pointset Fourier","title":"Results"},{"location":"sampler_rank1/","text":"Sampler Rank 1 [DK08] Files src/samplers/SamplerRank1.hpp src/bin/samplers/Rank1_2dd.cpp.cpp Description The Rank 1 lattices from [Keller04] . For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html . Execution Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message --fibonacci Uses the fibonnacci sequence as indices To generate a 2D point set of 1024 samples with a rank1 distribution, we can use the following client line command: . / bin / samplers / Rank1_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerRank1 s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close (); Results . / bin / samplers / Rank1_2dd - o rank1_1024 . edat - n 1024 File rank1_1024.edat Pointset Fourier . / bin / samplers / Rank1_2dd - o rank1_4096 . edat - n 4096 File rank1_4096.edat Pointset Fourier . / bin / samplers / Rank1_2dd --fibonacci -o rank1_fib_1024.edat -n 1024 File rank1_fib_1024.edat Pointset Fourier . / bin / samplers / Rank1_2dd --fibonacci -o rank1_fib_4096.edat -n 4096 File rank1_fib_4096.edat Pointset Fourier","title":"Rank 1"},{"location":"sampler_rank1/#sampler-rank-1-dk08","text":"Files src/samplers/SamplerRank1.hpp src/bin/samplers/Rank1_2dd.cpp.cpp","title":"Sampler Rank 1 [DK08]"},{"location":"sampler_rank1/#description","text":"The Rank 1 lattices from [Keller04] . For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html .","title":"Description"},{"location":"sampler_rank1/#execution","text":"Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message --fibonacci Uses the fibonnacci sequence as indices To generate a 2D point set of 1024 samples with a rank1 distribution, we can use the following client line command: . / bin / samplers / Rank1_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerRank1 s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close ();","title":"Execution"},{"location":"sampler_rank1/#results","text":". / bin / samplers / Rank1_2dd - o rank1_1024 . edat - n 1024 File rank1_1024.edat Pointset Fourier . / bin / samplers / Rank1_2dd - o rank1_4096 . edat - n 4096 File rank1_4096.edat Pointset Fourier . / bin / samplers / Rank1_2dd --fibonacci -o rank1_fib_1024.edat -n 1024 File rank1_fib_1024.edat Pointset Fourier . / bin / samplers / Rank1_2dd --fibonacci -o rank1_fib_4096.edat -n 4096 File rank1_fib_4096.edat Pointset Fourier","title":"Results"},{"location":"sampler_regular_grid/","text":"Sampler Regular Grid Files src/samplers/SamplerRegularGrid.hpp src/bin/samplers/RegularGrid_*dd.cpp.cpp Description A regular grid. For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html . Execution Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message To generate a 2D point set of 1024 samples with a regular_grid distribution, we can use the following client line command: . / bin / samplers / RegularGrid_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerRegularGrid s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close (); Results . / bin / samplers / RegularGrid_2dd - o regular_grid_1024 . edat - n 1024 File regular_grid_1024.edat Pointset Fourier . / bin / samplers / RegularGrid_2dd - o regular_grid_4096 . edat - n 4096 File regular_grid_4096.edat Pointset Fourier","title":"Regular grid"},{"location":"sampler_regular_grid/#sampler-regular-grid","text":"Files src/samplers/SamplerRegularGrid.hpp src/bin/samplers/RegularGrid_*dd.cpp.cpp","title":"Sampler Regular Grid"},{"location":"sampler_regular_grid/#description","text":"A regular grid. For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html .","title":"Description"},{"location":"sampler_regular_grid/#execution","text":"Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message To generate a 2D point set of 1024 samples with a regular_grid distribution, we can use the following client line command: . / bin / samplers / RegularGrid_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerRegularGrid s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close ();","title":"Execution"},{"location":"sampler_regular_grid/#results","text":". / bin / samplers / RegularGrid_2dd - o regular_grid_1024 . edat - n 1024 File regular_grid_1024.edat Pointset Fourier . / bin / samplers / RegularGrid_2dd - o regular_grid_4096 . edat - n 4096 File regular_grid_4096.edat Pointset Fourier","title":"Results"},{"location":"sampler_singlepeak/","text":"Sampler Single Peak [HSD13] Files src/samplers/SamplerSinglePeak.hpp src/bin/samplers/SinglePeak_2dd.cpp.cpp Description The sampler from [HSD13] with a single peak profile. For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html . Execution Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message To generate a 2D point set of 1024 samples with a singlepeak distribution, we can use the following client line command: . / bin / samplers / SinglePeak_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerSinglePeak s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close (); Results . / bin / samplers / SinglePeak_2dd - o singlepeak_1024 . edat - n 1024 File singlepeak_1024.edat Pointset Fourier . / bin / samplers / SinglePeak_2dd - o singlepeak_4096 . edat - n 4096 File singlepeak_4096.edat Pointset Fourier","title":"Single Peak"},{"location":"sampler_singlepeak/#sampler-single-peak-hsd13","text":"Files src/samplers/SamplerSinglePeak.hpp src/bin/samplers/SinglePeak_2dd.cpp.cpp","title":"Sampler Single Peak [HSD13]"},{"location":"sampler_singlepeak/#description","text":"The sampler from [HSD13] with a single peak profile. For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html .","title":"Description"},{"location":"sampler_singlepeak/#execution","text":"Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message To generate a 2D point set of 1024 samples with a singlepeak distribution, we can use the following client line command: . / bin / samplers / SinglePeak_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerSinglePeak s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close ();","title":"Execution"},{"location":"sampler_singlepeak/#results","text":". / bin / samplers / SinglePeak_2dd - o singlepeak_1024 . edat - n 1024 File singlepeak_1024.edat Pointset Fourier . / bin / samplers / SinglePeak_2dd - o singlepeak_4096 . edat - n 4096 File singlepeak_4096.edat Pointset Fourier","title":"Results"},{"location":"sampler_sobolindiced/","text":"Sampler Sobol Indiced [Sob67] Files src / samplers / SamplerSobolIndices . hpp src / bin / samplers / SobolIndices_ * d * . cpp . cpp Description The Sobol sequence. Samples are generated from a binary product between the binary representation of their index and a matrix, generated from primitive polynomials. The primitive polynomials are indiced based on OEIS For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html . Execution Parameters : [ HELP ] - o [ string=output_pts.dat ] Output file - m [ int=1 ] Number of poinset realisations - n [ ullint=1024 ] Number of samples to generate --silent Silent mode - h Displays this help message - x [ uint=1 ] Sobol Index on X dimension - y [ uint=2 ] Sobol Index on Y dimension To generate a 2D point set of 1024 samples with a sobolindiced distribution, we can use the following client line command: . / bin / samplers / SobolIndices_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerSobolIndices s ; unsigned int param_nbsamples = 1024 ; int sobolIdX = 1 ; int sobolIdY = 2 ; int indices [ 2 ] = { sobolIdX , sobolIdY }; s . setIndices ( indices , 2 ); s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close (); Results . / bin / samplers / SobolIndices_2dd - o sobolindiced_1024 . edat - n 1024 File sobolindiced_1024.edat Pointset Fourier . / bin / samplers / SobolIndices_2dd - o sobolindiced_4096 . edat - n 4096 File sobolindiced_4096.edat Pointset Fourier . / bin / samplers / SobolIndices_2dd - x 3 - y 4 - o sobolindiced_34_1024 . edat - n 1024 File sobolindiced_34_1024.edat Pointset Fourier . / bin / samplers / SobolIndices_2dd - x 5 - y 6 - o sobolindiced_56_1024 . edat - n 1024 File sobolindiced_56_1024.edat Pointset Fourier","title":"Sobol (Original)"},{"location":"sampler_sobolindiced/#sampler-sobol-indiced-sob67","text":"","title":"Sampler Sobol Indiced [Sob67]"},{"location":"sampler_sobolindiced/#files","text":"src / samplers / SamplerSobolIndices . hpp src / bin / samplers / SobolIndices_ * d * . cpp . cpp","title":"Files"},{"location":"sampler_sobolindiced/#description","text":"The Sobol sequence. Samples are generated from a binary product between the binary representation of their index and a matrix, generated from primitive polynomials. The primitive polynomials are indiced based on OEIS For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html .","title":"Description"},{"location":"sampler_sobolindiced/#execution","text":"Parameters : [ HELP ] - o [ string=output_pts.dat ] Output file - m [ int=1 ] Number of poinset realisations - n [ ullint=1024 ] Number of samples to generate --silent Silent mode - h Displays this help message - x [ uint=1 ] Sobol Index on X dimension - y [ uint=2 ] Sobol Index on Y dimension To generate a 2D point set of 1024 samples with a sobolindiced distribution, we can use the following client line command: . / bin / samplers / SobolIndices_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerSobolIndices s ; unsigned int param_nbsamples = 1024 ; int sobolIdX = 1 ; int sobolIdY = 2 ; int indices [ 2 ] = { sobolIdX , sobolIdY }; s . setIndices ( indices , 2 ); s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close ();","title":"Execution"},{"location":"sampler_sobolindiced/#results","text":". / bin / samplers / SobolIndices_2dd - o sobolindiced_1024 . edat - n 1024 File sobolindiced_1024.edat Pointset Fourier . / bin / samplers / SobolIndices_2dd - o sobolindiced_4096 . edat - n 4096 File sobolindiced_4096.edat Pointset Fourier . / bin / samplers / SobolIndices_2dd - x 3 - y 4 - o sobolindiced_34_1024 . edat - n 1024 File sobolindiced_34_1024.edat Pointset Fourier . / bin / samplers / SobolIndices_2dd - x 5 - y 6 - o sobolindiced_56_1024 . edat - n 1024 File sobolindiced_56_1024.edat Pointset Fourier","title":"Results"},{"location":"sampler_sobolkuo/","text":"Sampler Sobol [JK03] Files src / samplers / SamplerSobol . hpp src / bin / samplers / Sobol_ * dd . cpp . cpp Description The Sobol sequence. Samples are generated from a binary product between the binary representation of their index and a matrix, generated from primitive polynomials. The code from this sampler is from [JK03] . For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html . License BSD-like, see https://web.maths.unsw.edu.au/~fkuo/sobol/ . Execution Parameters : [ HELP ] - o [ string=output_pts.dat ] Output file - m [ int=1 ] Number of poinset realisations - n [ ullint=1024 ] Number of samples to generate --silent Silent mode - h Displays this help message - d \u2039 string \u203a File containing the direction numbers To generate a 2D point set of 1024 samples with a sobolkuo distribution, we can use the following client line command: . / bin / samplers / Sobol_2dd - d .. / .. / data / sobol / new - joe - kuo - 6 . 21201 - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerSobol s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close (); Results . / bin / samplers / Sobol_2dd - d .. / .. / data / sobol / new - joe - kuo - 6 . 21201 - o sobolkuo_1024 . edat - n 1024 File sobolkuo_1024.edat Pointset Fourier . / bin / samplers / Sobol_2dd - d .. / .. / data / sobol / new - joe - kuo - 6 . 21201 - o sobolkuo_4096 . edat - n 4096 File sobolkuo_4096.edat Pointset Fourier","title":"Sobol (Joe&Kuo)"},{"location":"sampler_sobolkuo/#sampler-sobol-jk03","text":"","title":"Sampler Sobol [JK03]"},{"location":"sampler_sobolkuo/#files","text":"src / samplers / SamplerSobol . hpp src / bin / samplers / Sobol_ * dd . cpp . cpp","title":"Files"},{"location":"sampler_sobolkuo/#description","text":"The Sobol sequence. Samples are generated from a binary product between the binary representation of their index and a matrix, generated from primitive polynomials. The code from this sampler is from [JK03] . For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html .","title":"Description"},{"location":"sampler_sobolkuo/#license","text":"BSD-like, see https://web.maths.unsw.edu.au/~fkuo/sobol/ .","title":"License"},{"location":"sampler_sobolkuo/#execution","text":"Parameters : [ HELP ] - o [ string=output_pts.dat ] Output file - m [ int=1 ] Number of poinset realisations - n [ ullint=1024 ] Number of samples to generate --silent Silent mode - h Displays this help message - d \u2039 string \u203a File containing the direction numbers To generate a 2D point set of 1024 samples with a sobolkuo distribution, we can use the following client line command: . / bin / samplers / Sobol_2dd - d .. / .. / data / sobol / new - joe - kuo - 6 . 21201 - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerSobol s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close ();","title":"Execution"},{"location":"sampler_sobolkuo/#results","text":". / bin / samplers / Sobol_2dd - d .. / .. / data / sobol / new - joe - kuo - 6 . 21201 - o sobolkuo_1024 . edat - n 1024 File sobolkuo_1024.edat Pointset Fourier . / bin / samplers / Sobol_2dd - d .. / .. / data / sobol / new - joe - kuo - 6 . 21201 - o sobolkuo_4096 . edat - n 4096 File sobolkuo_4096.edat Pointset Fourier","title":"Results"},{"location":"sampler_step/","text":"Sampler Step [HSD13] Files src/samplers/SamplerStep.hpp src/bin/samplers/Step_2dd.cpp.cpp Description The sampler from [HSD13] with a step profile. For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html . Execution Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message To generate a 2D point set of 1024 samples with a step distribution, we can use the following client line command: . / bin / samplers / Step_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerStep s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close (); Results . / bin / samplers / Step_2dd - o step_1024 . edat - n 1024 File step_1024.edat Pointset Fourier . / bin / samplers / Step_2dd - o step_4096 . edat - n 4096 File step_4096.edat Pointset Fourier","title":"Step"},{"location":"sampler_step/#sampler-step-hsd13","text":"Files src/samplers/SamplerStep.hpp src/bin/samplers/Step_2dd.cpp.cpp","title":"Sampler Step [HSD13]"},{"location":"sampler_step/#description","text":"The sampler from [HSD13] with a step profile. For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html .","title":"Description"},{"location":"sampler_step/#execution","text":"Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message To generate a 2D point set of 1024 samples with a step distribution, we can use the following client line command: . / bin / samplers / Step_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerStep s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close ();","title":"Execution"},{"location":"sampler_step/#results","text":". / bin / samplers / Step_2dd - o step_1024 . edat - n 1024 File step_1024.edat Pointset Fourier . / bin / samplers / Step_2dd - o step_4096 . edat - n 4096 File step_4096.edat Pointset Fourier","title":"Results"},{"location":"sampler_stratified/","text":"Sampler stratified Files src/samplers/SamplerStratified.hpp src/bin/samplers/Stratified_*.cpp.cpp Description The domain is partitioned with a grid of k x k. In each cell of this grid, a random sample is generated. For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html . Execution Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message To generate a 2D point set of 1024 samples with a stratified distribution, we can use the following client line command: . / bin / samplers / Stratified_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerStratified s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close (); Results . / bin / samplers / Stratified_2dd - o stratified_1024 . edat - n 1024 File stratified_1024.edat Pointset Fourier . / bin / samplers / Stratified_2dd - o stratified_4096 . edat - n 4096 File stratified_4096.edat Pointset Fourier","title":"Stratified"},{"location":"sampler_stratified/#sampler-stratified","text":"Files src/samplers/SamplerStratified.hpp src/bin/samplers/Stratified_*.cpp.cpp","title":"Sampler stratified"},{"location":"sampler_stratified/#description","text":"The domain is partitioned with a grid of k x k. In each cell of this grid, a random sample is generated. For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html .","title":"Description"},{"location":"sampler_stratified/#execution","text":"Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message To generate a 2D point set of 1024 samples with a stratified distribution, we can use the following client line command: . / bin / samplers / Stratified_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerStratified s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close ();","title":"Execution"},{"location":"sampler_stratified/#results","text":". / bin / samplers / Stratified_2dd - o stratified_1024 . edat - n 1024 File stratified_1024.edat Pointset Fourier . / bin / samplers / Stratified_2dd - o stratified_4096 . edat - n 4096 File stratified_4096.edat Pointset Fourier","title":"Results"},{"location":"sampler_whitenoise/","text":"Sampler whitenoise Files src/samplers/SamplerWhitenoise.hpp src/bin/samplers/Whitenoise_*.cpp.cpp Description A pure random sampler For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html . Execution Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message To generate a 2D point set of 1024 samples with a whitenoise distribution, we can use the following client line command: . / bin / samplers / Whitenoise_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerWhitenoise s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close (); Results . / bin / samplers / Whitenoise_2dd - o whitenoise_1024 . edat - n 1024 File whitenoise_1024.edat Pointset Fourier . / bin / samplers / Whitenoise_2dd - o whitenoise_4096 . edat - n 4096 File whitenoise_4096.edat Pointset Fourier","title":"Whitenoise"},{"location":"sampler_whitenoise/#sampler-whitenoise","text":"Files src/samplers/SamplerWhitenoise.hpp src/bin/samplers/Whitenoise_*.cpp.cpp","title":"Sampler whitenoise"},{"location":"sampler_whitenoise/#description","text":"A pure random sampler For a more precise description of this sampler and its performances in terms of aliasing and discrepancy, please refer to the following web bundle https://liris.cnrs.fr/ldbn/HTML_bundle/index.html .","title":"Description"},{"location":"sampler_whitenoise/#execution","text":"Parameters: [HELP] -o [string = output_pts.dat] Output file -m [int = 1] Number of poinset realisations -n [ullint = 1024] Number of samples to generate --silent Silent mode -h Displays this help message To generate a 2D point set of 1024 samples with a whitenoise distribution, we can use the following client line command: . / bin / samplers / Whitenoise_2dd - n 1024 - o toto . dat Or one can use the following C++ code: PointsetWriter < 2 , double , Point < 2 , double > > writer ; writer . open ( \"toto.dat\" ); Pointset < 2 , double , Point < 2 , double > > pts ; SamplerWhitenoise s ; unsigned int param_nbsamples = 1024 ; s . generateSamples < 2 , double , Point < 2 , double > > ( pts , param_nbsamples ); writer . writePointset ( pts ); writer . close ();","title":"Execution"},{"location":"sampler_whitenoise/#results","text":". / bin / samplers / Whitenoise_2dd - o whitenoise_1024 . edat - n 1024 File whitenoise_1024.edat Pointset Fourier . / bin / samplers / Whitenoise_2dd - o whitenoise_4096 . edat - n 4096 File whitenoise_4096.edat Pointset Fourier","title":"Results"},{"location":"samplers/","text":"Samplers All samplers are illustrated in 2D but most of them are available in higher dimensions. Please have a look to the code for more details. Low Discrepancy Samplers Sampler License Illustration Faure LGPL Halton BSD Hammersley BSD Niederreiter LGPL Sobol (code from [JK03] ) BSD Sobol (Original) BSD Owen (Sobol) BSD Rank 1 LDBN BNLD Sequences Blue Noise Samplers Sampler Illustration AA Patterns ART CVT CapCVT Forced Random FPO LDBN Penrose BNOT Poisson Samplers Sampler Illustration Dart Throwing Fast Poisson Other Samplers Sampler Illustration CMJ Hexagonal Grid Korobov NRooks Regular Grid Single Peak Step Stratified Whitenoise Experimental Samplers Sampler Illustration Exhaustive Owen Genetic Owen Gradient descent","title":"All samplers"},{"location":"samplers/#samplers","text":"All samplers are illustrated in 2D but most of them are available in higher dimensions. Please have a look to the code for more details.","title":"Samplers"},{"location":"samplers/#low-discrepancy-samplers","text":"Sampler License Illustration Faure LGPL Halton BSD Hammersley BSD Niederreiter LGPL Sobol (code from [JK03] ) BSD Sobol (Original) BSD Owen (Sobol) BSD Rank 1 LDBN BNLD Sequences","title":"Low Discrepancy Samplers"},{"location":"samplers/#blue-noise-samplers","text":"Sampler Illustration AA Patterns ART CVT CapCVT Forced Random FPO LDBN Penrose BNOT","title":"Blue Noise Samplers"},{"location":"samplers/#poisson-samplers","text":"Sampler Illustration Dart Throwing Fast Poisson","title":"Poisson Samplers"},{"location":"samplers/#other-samplers","text":"Sampler Illustration CMJ Hexagonal Grid Korobov NRooks Regular Grid Single Peak Step Stratified Whitenoise","title":"Other Samplers"},{"location":"samplers/#experimental-samplers","text":"Sampler Illustration Exhaustive Owen Genetic Owen Gradient descent","title":"Experimental Samplers"}]}